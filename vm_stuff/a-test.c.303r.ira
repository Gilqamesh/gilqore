
;; Function fn (fn, funcdef_no=0, decl_uid=2843, cgraph_uid=1, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r96: preferred INT_SSE_REGS, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a2 (r96,l0) best INT_SSE_REGS, allocno INT_SSE_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r94,l0) best SIREG, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r92,l0) best AD_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r92,l0) costs: AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:19000 SSE_REGS:19000 INT_SSE_REGS:37000 MEM:13000
  a1(r95,l0) costs: AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a2(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:21000 INT_SSE_REGS:21000 ALL_REGS:314000 MEM:9000
  a3(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a4(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:11000
  a5(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 INT_SSE_REGS:26000 MEM:11000
  a6(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a7(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a8(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a9(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a10(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 INT_SSE_REGS:26000 MEM:11000
  a12(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a13(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:12000
  a14(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:12000

   Insn 34(l0): point = 0
   Insn 33(l0): point = 2
   Insn 29(l0): point = 4
   Insn 28(l0): point = 6
   Insn 27(l0): point = 8
   Insn 26(l0): point = 10
   Insn 25(l0): point = 12
   Insn 22(l0): point = 14
   Insn 21(l0): point = 16
   Insn 20(l0): point = 18
   Insn 19(l0): point = 20
   Insn 18(l0): point = 22
   Insn 17(l0): point = 24
   Insn 16(l0): point = 26
   Insn 15(l0): point = 28
   Insn 14(l0): point = 30
   Insn 13(l0): point = 32
   Insn 12(l0): point = 34
   Insn 11(l0): point = 36
   Insn 10(l0): point = 38
   Insn 9(l0): point = 40
   Insn 5(l0): point = 42
   Insn 4(l0): point = 44
   Insn 3(l0): point = 46
   Insn 2(l0): point = 48
 a0(r92 [0]): [3..4]
 a0(r92 [1]): [3..4]
 a1(r95 [0]): [5..12]
 a1(r95 [1]): [5..12]
 a2(r96): [7..8]
 a3(r91): [15..22]
 a4(r87): [17..30]
 a5(r85): [19..34]
 a6(r83): [21..38]
 a7(r90): [23..24]
 a8(r89): [25..26]
 a9(r88): [27..28]
 a10(r86): [31..32]
 a11(r84): [35..36]
 a12(r82): [39..40]
 a13(r94): [43..46]
 a14(r93): [45..48]
Compressing live ranges: from 51 to 20 - 39%
Ranges after the compression:
 a0(r92 [0]): [0..1]
 a0(r92 [1]): [0..1]
 a1(r95 [0]): [2..3]
 a1(r95 [1]): [2..3]
 a2(r96): [2..3]
 a3(r91): [4..5]
 a4(r87): [4..11]
 a5(r85): [4..13]
 a6(r83): [4..15]
 a7(r90): [6..7]
 a8(r89): [8..9]
 a9(r88): [10..11]
 a10(r86): [12..13]
 a11(r84): [14..15]
 a12(r82): [16..17]
 a13(r94): [18..19]
 a14(r93): [18..19]
  pref0:a13(r94)<-hr4@1500
  pref1:a14(r93)<-hr5@1500
  pref2:a0(r92)<-hr0@1500
  regions=1, blocks=3, points=20
    allocnos=15 (big 2), copies=0, conflicts=0, ranges=17
Disposition:
   12:r82  l0     0    6:r83  l0     2   11:r84  l0     0    5:r85  l0     1
   10:r86  l0     0    4:r87  l0     0    9:r88  l0     4    8:r89  l0     4
    7:r90  l0     4    3:r91  l0     4    0:r92  l0     0   14:r93  l0     1
   13:r94  l0     0    1:r95  l0     0    2:r96  l0     2
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


fn

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={2d,2u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,2u} r7={1d,2u} r16={1d,1u} r17={4d} r19={1d,14u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={3d,3u} r96={1d,1u} 
;;    total ref usage 84{42d,42u,0e} in 25{25 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg:DI 93)
        (reg:DI 5 di [ a ])) "test.c":16:16 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(insn 3 2 4 2 (set (reg:SI 94)
        (reg:SI 4 si [ a+8 ])) "test.c":16:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ a+8 ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [1 a+0 S8 A32])
        (reg:DI 93)) "test.c":16:16 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 93)
        (nil)))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [1 a+8 S4 A32])
        (reg:SI 94)) "test.c":16:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 94)
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:QI 82 [ _1 ])
        (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 a._+0 S1 A32])) "test.c":18:15 85 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:QI 83 [ _2 ])
                (plus:QI (reg:QI 82 [ _1 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":18:18 250 {*addqi_1}
     (expr_list:REG_DEAD (reg:QI 82 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 11 10 12 2 (set (reg:HI 84 [ _3 ])
        (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -46 [0xffffffffffffffd2])) [2 a.__+0 S2 A16])) "test.c":19:16 84 {*movhi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:HI 85 [ _4 ])
                (plus:HI (reg:HI 84 [ _3 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":19:20 249 {*addhi_1}
     (expr_list:REG_DEAD (reg:HI 84 [ _3 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 13 12 14 2 (set (reg:SI 86 [ _5 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -44 [0xffffffffffffffd4])) [3 a.___+0 S4 A32])) "test.c":20:17 83 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 87 [ _6 ])
                (plus:SI (reg:SI 86 [ _5 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":20:22 246 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 86 [ _5 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 15 14 16 2 (set (reg:QI 88 [ _7 ])
        (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 a.____+0 S1 A32])) "test.c":21:18 85 {*movqi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:QI 89 [ _8 ])
        (reg:QI 88 [ _7 ])) "test.c":21:18 85 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 88 [ _7 ])
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg:QI 90 [ _9 ])
                (plus:QI (reg:QI 89 [ _8 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":21:24 250 {*addqi_1}
     (expr_list:REG_DEAD (reg:QI 89 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 17 19 2 (set (reg:QI 91 [ _10 ])
        (reg:QI 90 [ _9 ])) "test.c":21:24 85 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 90 [ _9 ])
        (nil)))
(insn 19 18 20 2 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 D.3261._+0 S1 A32])
        (reg:QI 83 [ _2 ])) "test.c":17:12 85 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 83 [ _2 ])
        (nil)))
(insn 20 19 21 2 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -10 [0xfffffffffffffff6])) [2 D.3261.__+0 S2 A16])
        (reg:HI 85 [ _4 ])) "test.c":17:12 84 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 85 [ _4 ])
        (nil)))
(insn 21 20 22 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 D.3261.___+0 S4 A32])
        (reg:SI 87 [ _6 ])) "test.c":17:12 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ _6 ])
        (nil)))
(insn 22 21 25 2 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 D.3261.____+0 S1 A32])
        (reg:QI 91 [ _10 ])) "test.c":17:12 85 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 91 [ _10 ])
        (nil)))
(insn 25 22 26 2 (clobber (reg:TI 95)) "test.c":17:12 -1
     (nil))
(insn 26 25 27 2 (set (subreg:DI (reg:TI 95) 0)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 D.3261+0 S8 A32])) "test.c":17:12 82 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 96)
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 D.3261+8 S4 A32]))) "test.c":17:12 151 {*zero_extendsidi2}
     (nil))
(insn 28 27 29 2 (set (subreg:DI (reg:TI 95) 8)
        (reg:DI 96)) "test.c":17:12 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(insn 29 28 33 2 (set (reg:TI 92 [ <retval> ])
        (reg:TI 95)) "test.c":17:12 81 {*movti_internal}
     (expr_list:REG_DEAD (reg:TI 95)
        (nil)))
(insn 33 29 34 2 (set (reg:TI 0 ax)
        (reg:TI 92 [ <retval> ])) "test.c":23:1 81 {*movti_internal}
     (expr_list:REG_DEAD (reg:TI 92 [ <retval> ])
        (nil)))
(insn 34 33 0 2 (use (reg:TI 0 ax)) "test.c":23:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fn2 (fn2, funcdef_no=1, decl_uid=2847, cgraph_uid=2, symbol_order=1)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:21000 INT_SSE_REGS:21000 ALL_REGS:314000 MEM:8000
  a2(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 15(l0): point = 0
   Insn 14(l0): point = 2
   Insn 10(l0): point = 4
   Insn 7(l0): point = 6
   Insn 6(l0): point = 8
   Insn 2(l0): point = 10
 a0(r83): [3..4]
 a1(r82): [5..6]
 a2(r84): [7..8]
Compressing live ranges: from 13 to 6 - 46%
Ranges after the compression:
 a0(r83): [0..1]
 a1(r82): [2..3]
 a2(r84): [4..5]
  pref0:a0(r83)<-hr0@1500
  regions=1, blocks=3, points=6
    allocnos=3 (big 0), copies=0, conflicts=0, ranges=3
Disposition:
    1:r82  l0     0    0:r83  l0     0    2:r84  l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


fn2

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,2u} r7={1d,2u} r16={1d,1u} r17={1d} r19={1d,4u,1e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} 
;;    total ref usage 40{24d,15u,1e} in 6{6 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 82 83 84
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 a+0 S4 A32])
        (reg:SI 5 di [ a ])) "test.c":25:24 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ a ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 a+0 S4 A32])) "test.c":26:14 83 {*movsi_internal}
     (nil))
(insn 7 6 10 2 (parallel [
            (set (reg:SI 82 [ _2 ])
                (plus:SI (reg:SI 84)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":26:14 246 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 84)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 a+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 10 7 14 2 (set (reg:SI 83 [ <retval> ])
        (reg:SI 82 [ _2 ])) "test.c":26:14 discrim 1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82 [ _2 ])
        (nil)))
(insn 14 10 15 2 (set (reg/i:SI 0 ax)
        (reg:SI 83 [ <retval> ])) "test.c":27:1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ <retval> ])
        (nil)))
(insn 15 14 0 2 (use (reg/i:SI 0 ax)) "test.c":27:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fn3 (fn3, funcdef_no=2, decl_uid=2849, cgraph_uid=3, symbol_order=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 53.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r108,l0) best AD_REGS, allocno GENERAL_REGS
    r107: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r107,l0) best SIREG, allocno GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r106,l0) best DIREG, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r100,l0) best AD_REGS, allocno GENERAL_REGS
    r99: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r99,l0) best SIREG, allocno GENERAL_REGS
    r98: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r98,l0) best DIREG, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r92,l0) best AD_REGS, allocno GENERAL_REGS
    r91: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r91,l0) best SIREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred AD_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r84,l0) best AD_REGS, allocno GENERAL_REGS
    r83: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r83,l0) best SIREG, allocno GENERAL_REGS
    r82: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a34 (r82,l0) best DIREG, allocno GENERAL_REGS

  a0(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a1(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:4000 NO_REX_SSE_REGS:4000 SSE_REGS:4000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:214000 MEM:12000
  a2(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:214000 MEM:12000
  a3(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a5(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:4000 NO_REX_SSE_REGS:4000 SSE_REGS:4000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:214000 MEM:12000
  a6(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:214000 MEM:12000
  a7(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:11000
  a8(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a9(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a10(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r108,l0) costs: AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:21000
  a12(r107,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r106,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:11000
  a15(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a16(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a17(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r100,l0) costs: AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:21000
  a19(r99,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r98,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:11000
  a22(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a23(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a24(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r92,l0) costs: AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:21000
  a26(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a27(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:11000
  a29(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a30(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a31(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a32(r84,l0) costs: AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:21000
  a33(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 80(l0): point = 0
   Insn 79(l0): point = 2
   Insn 73(l0): point = 4
   Insn 72(l0): point = 6
   Insn 71(l0): point = 8
   Insn 70(l0): point = 10
   Insn 69(l0): point = 12
   Insn 68(l0): point = 14
   Insn 67(l0): point = 16
   Insn 66(l0): point = 18
   Insn 65(l0): point = 20
   Insn 64(l0): point = 22
   Insn 63(l0): point = 24
   Insn 62(l0): point = 26
   Insn 61(l0): point = 28
   Insn 60(l0): point = 30
   Insn 59(l0): point = 32
   Insn 58(l0): point = 34
   Insn 57(l0): point = 36
   Insn 55(l0): point = 38
   Insn 54(l0): point = 40
   Insn 53(l0): point = 42
   Insn 52(l0): point = 44
   Insn 51(l0): point = 46
   Insn 50(l0): point = 48
   Insn 49(l0): point = 50
   Insn 48(l0): point = 52
   Insn 47(l0): point = 54
   Insn 46(l0): point = 56
   Insn 45(l0): point = 58
   Insn 44(l0): point = 60
   Insn 42(l0): point = 62
   Insn 41(l0): point = 64
   Insn 40(l0): point = 66
   Insn 39(l0): point = 68
   Insn 38(l0): point = 70
   Insn 37(l0): point = 72
   Insn 36(l0): point = 74
   Insn 35(l0): point = 76
   Insn 34(l0): point = 78
   Insn 33(l0): point = 80
   Insn 32(l0): point = 82
   Insn 31(l0): point = 84
   Insn 29(l0): point = 86
   Insn 28(l0): point = 88
   Insn 27(l0): point = 90
   Insn 26(l0): point = 92
   Insn 25(l0): point = 94
   Insn 24(l0): point = 96
   Insn 23(l0): point = 98
   Insn 22(l0): point = 100
   Insn 21(l0): point = 102
   Insn 20(l0): point = 104
   Insn 19(l0): point = 106
   Insn 18(l0): point = 108
   Insn 16(l0): point = 110
   Insn 15(l0): point = 112
   Insn 14(l0): point = 114
   Insn 13(l0): point = 116
   Insn 12(l0): point = 118
   Insn 11(l0): point = 120
   Insn 10(l0): point = 122
   Insn 9(l0): point = 124
   Insn 8(l0): point = 126
   Insn 7(l0): point = 128
   Insn 6(l0): point = 130
   Insn 2(l0): point = 132
 a0(r118): [5..12]
 a1(r120): [5..6]
 a2(r119): [9..10]
 a3(r117): [15..16]
 a4(r114): [19..26]
 a5(r116): [19..20]
 a6(r115): [23..24]
 a7(r113): [29..30]
 a8(r110): [31..36]
 a9(r112): [31..32]
 a10(r111): [33..34]
 a11(r108 [0]): [39..40]
 a11(r108 [1]): [37..40]
 a12(r107): [45..48]
 a13(r106): [47..50]
 a14(r105): [53..54]
 a15(r102): [55..60]
 a16(r104): [55..56]
 a17(r103): [57..58]
 a18(r100 [0]): [63..64]
 a18(r100 [1]): [61..64]
 a19(r99): [69..72]
 a20(r98): [71..74]
 a21(r97): [77..78]
 a22(r94): [79..84]
 a23(r96): [79..80]
 a24(r95): [81..82]
 a25(r92 [0]): [87..88]
 a25(r92 [1]): [85..88]
 a26(r91): [93..96]
 a27(r90): [95..98]
 a28(r89): [101..102]
 a29(r86): [103..108]
 a30(r88): [103..104]
 a31(r87): [105..106]
 a32(r84 [0]): [111..112]
 a32(r84 [1]): [109..112]
 a33(r83): [117..120]
 a34(r82): [119..122]
Compressing live ranges: from 135 to 50 - 37%
Ranges after the compression:
 a0(r118): [0..3]
 a1(r120): [0..1]
 a2(r119): [2..3]
 a3(r117): [4..5]
 a4(r114): [6..9]
 a5(r116): [6..7]
 a6(r115): [8..9]
 a7(r113): [10..11]
 a8(r110): [12..15]
 a9(r112): [12..13]
 a10(r111): [14..15]
 a11(r108 [0]): [16..17]
 a11(r108 [1]): [16..17]
 a12(r107): [18..19]
 a13(r106): [18..19]
 a14(r105): [20..21]
 a15(r102): [22..25]
 a16(r104): [22..23]
 a17(r103): [24..25]
 a18(r100 [0]): [26..27]
 a18(r100 [1]): [26..27]
 a19(r99): [28..29]
 a20(r98): [28..29]
 a21(r97): [30..31]
 a22(r94): [32..35]
 a23(r96): [32..33]
 a24(r95): [34..35]
 a25(r92 [0]): [36..37]
 a25(r92 [1]): [36..37]
 a26(r91): [38..39]
 a27(r90): [38..39]
 a28(r89): [40..41]
 a29(r86): [42..45]
 a30(r88): [42..43]
 a31(r87): [44..45]
 a32(r84 [0]): [46..47]
 a32(r84 [1]): [46..47]
 a33(r83): [48..49]
 a34(r82): [48..49]
  pref0:a11(r108)<-hr0@1500
  pref1:a12(r107)<-hr4@1500
  pref2:a13(r106)<-hr5@1500
  pref3:a18(r100)<-hr0@1500
  pref4:a19(r99)<-hr4@1500
  pref5:a20(r98)<-hr5@1500
  pref6:a25(r92)<-hr0@1500
  pref7:a26(r91)<-hr4@1500
  pref8:a27(r90)<-hr5@1500
  pref9:a32(r84)<-hr0@1500
  pref10:a33(r83)<-hr4@1500
  pref11:a34(r82)<-hr5@1500
  regions=1, blocks=3, points=50
    allocnos=35 (big 4), copies=0, conflicts=0, ranges=39
Disposition:
   34:r82  l0     1   33:r83  l0     0   32:r84  l0     0   29:r86  l0     1
   31:r87  l0     0   30:r88  l0     0   28:r89  l0     0   27:r90  l0     1
   26:r91  l0     0   25:r92  l0     0   22:r94  l0     1   24:r95  l0     0
   23:r96  l0     0   21:r97  l0     0   20:r98  l0     1   19:r99  l0     0
   18:r100 l0     0   15:r102 l0     1   17:r103 l0     0   16:r104 l0     0
   14:r105 l0     0   13:r106 l0     1   12:r107 l0     0   11:r108 l0     0
    8:r110 l0     1   10:r111 l0     0    9:r112 l0     0    7:r113 l0     0
    4:r114 l0     0    6:r115 l0     1    5:r116 l0     1    3:r117 l0     0
    0:r118 l0     0    2:r119 l0     1    1:r120 l0     1
+++Costs: overall -12000, reg -12000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


fn3

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,6u} r1={9d,4u} r2={5d} r4={9d,4u} r5={9d,5u} r6={1d,2u} r7={1d,6u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,1u} r17={12d} r18={4d} r19={1d,35u} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r82={1d,1u} r83={1d,1u} r84={1d,2u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,2u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,2u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,2u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,2u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,2u} r119={1d,1u} r120={1d,1u} 
;;    total ref usage 447{343d,104u,0e} in 67{63 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 86 87 88 89 90 91 92 94 95 96 97 98 99 100 102 103 104 105 106 107 108 110 111 112 113 114 115 116 117 118 119 120
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])
        (reg:DI 5 di [ .result_ptr ])) "test.c":29:11 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ .result_ptr ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -60 [0xffffffffffffffc4])) [0 a._+0 S1 A32])
        (const_int 3 [0x3])) "test.c":30:9 85 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -58 [0xffffffffffffffc6])) [2 a.__+0 S2 A16])
        (const_int 3443 [0xd73])) "test.c":30:9 84 {*movhi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [3 a.___+0 S4 A32])
        (const_int -89283 [0xfffffffffffea33d])) "test.c":30:9 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -52 [0xffffffffffffffcc])) [0 a.____+0 S1 A32])
        (const_int -93 [0xffffffffffffffa3])) "test.c":30:9 85 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 82)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -60 [0xffffffffffffffc4])) [1 a+0 S8 A32])) "test.c":37:16 82 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 83)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -52 [0xffffffffffffffcc])) [1 a+8 S4 A32])) "test.c":37:16 83 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 82)) "test.c":37:16 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 82)
        (nil)))
(insn 13 12 14 2 (set (reg:SI 4 si)
        (reg:SI 83)) "test.c":37:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83)
        (nil)))
(call_insn 14 13 15 2 (set (parallel:BLK [
                (expr_list:REG_DEP_TRUE (reg:TI 0 ax)
                    (const_int 0 [0]))
            ])
        (call (mem:QI (symbol_ref:DI ("fn") [flags 0x3]  <function_decl 0x7fb06a9df600 fn>) [0 fn S1 A8])
            (const_int 0 [0]))) "test.c":37:16 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list (use (reg:SI 4 si))
        (expr_list (use (reg:DI 5 di))
            (nil))))
(insn 15 14 16 2 (set (reg:TI 84)
        (reg:TI 0 ax)) "test.c":37:16 81 {*movti_internal}
     (expr_list:REG_DEAD (reg:TI 0 ax)
        (nil)))
(insn 16 15 18 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [1 D.3267+0 S8 A64])
        (subreg:DI (reg:TI 84) 0)) "test.c":37:16 82 {*movdi_internal}
     (nil))
(insn 18 16 19 2 (set (reg:SI 86)
        (subreg:SI (reg:TI 84) 8)) "test.c":37:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:TI 84)
        (nil)))
(insn 19 18 20 2 (set (reg:SI 87)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [1 D.3267+8 S4 A64])) "test.c":37:16 83 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 88)
                (and:SI (reg:SI 87)
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":37:16 565 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 87)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 21 20 22 2 (parallel [
            (set (reg:SI 89)
                (ior:SI (reg:SI 88)
                    (reg:SI 86)))
            (clobber (reg:CC 17 flags))
        ]) "test.c":37:16 603 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 88)
        (expr_list:REG_DEAD (reg:SI 86)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 22 21 23 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [1 D.3267+8 S4 A64])
        (reg:SI 89)) "test.c":37:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 23 22 24 2 (set (reg:DI 90)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -60 [0xffffffffffffffc4])) [1 a+0 S8 A32])) "test.c":39:16 82 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -52 [0xffffffffffffffcc])) [1 a+8 S4 A32])) "test.c":39:16 83 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 90)) "test.c":39:16 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (nil)))
(insn 26 25 27 2 (set (reg:SI 4 si)
        (reg:SI 91)) "test.c":39:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(call_insn 27 26 28 2 (set (parallel:BLK [
                (expr_list:REG_DEP_TRUE (reg:TI 0 ax)
                    (const_int 0 [0]))
            ])
        (call (mem:QI (symbol_ref:DI ("fn") [flags 0x3]  <function_decl 0x7fb06a9df600 fn>) [0 fn S1 A8])
            (const_int 0 [0]))) "test.c":39:16 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list (use (reg:SI 4 si))
        (expr_list (use (reg:DI 5 di))
            (nil))))
(insn 28 27 29 2 (set (reg:TI 92)
        (reg:TI 0 ax)) "test.c":39:16 81 {*movti_internal}
     (expr_list:REG_DEAD (reg:TI 0 ax)
        (nil)))
(insn 29 28 31 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [1 D.3268+0 S8 A32])
        (subreg:DI (reg:TI 92) 0)) "test.c":39:16 82 {*movdi_internal}
     (nil))
(insn 31 29 32 2 (set (reg:SI 94)
        (subreg:SI (reg:TI 92) 8)) "test.c":39:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:TI 92)
        (nil)))
(insn 32 31 33 2 (set (reg:SI 95)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [1 D.3268+8 S4 A32])) "test.c":39:16 83 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg:SI 96)
                (and:SI (reg:SI 95)
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 565 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 95)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 34 33 35 2 (parallel [
            (set (reg:SI 97)
                (ior:SI (reg:SI 96)
                    (reg:SI 94)))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 603 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 96)
        (expr_list:REG_DEAD (reg:SI 94)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 35 34 36 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [1 D.3268+8 S4 A32])
        (reg:SI 97)) "test.c":39:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 97)
        (nil)))
(insn 36 35 37 2 (set (reg:DI 98)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [1 D.3268+0 S8 A32])) "test.c":39:16 discrim 1 82 {*movdi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [1 D.3268+8 S4 A32])) "test.c":39:16 discrim 1 83 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:DI 5 di)
        (reg:DI 98)) "test.c":39:16 discrim 1 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 98)
        (nil)))
(insn 39 38 40 2 (set (reg:SI 4 si)
        (reg:SI 99)) "test.c":39:16 discrim 1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(call_insn 40 39 41 2 (set (parallel:BLK [
                (expr_list:REG_DEP_TRUE (reg:TI 0 ax)
                    (const_int 0 [0]))
            ])
        (call (mem:QI (symbol_ref:DI ("fn") [flags 0x3]  <function_decl 0x7fb06a9df600 fn>) [0 fn S1 A8])
            (const_int 0 [0]))) "test.c":39:16 discrim 1 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list (use (reg:SI 4 si))
        (expr_list (use (reg:DI 5 di))
            (nil))))
(insn 41 40 42 2 (set (reg:TI 100)
        (reg:TI 0 ax)) "test.c":39:16 discrim 1 81 {*movti_internal}
     (expr_list:REG_DEAD (reg:TI 0 ax)
        (nil)))
(insn 42 41 44 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 D.3269+0 S8 A64])
        (subreg:DI (reg:TI 100) 0)) "test.c":39:16 discrim 1 82 {*movdi_internal}
     (nil))
(insn 44 42 45 2 (set (reg:SI 102)
        (subreg:SI (reg:TI 100) 8)) "test.c":39:16 discrim 1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:TI 100)
        (nil)))
(insn 45 44 46 2 (set (reg:SI 103)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 D.3269+8 S4 A64])) "test.c":39:16 discrim 1 83 {*movsi_internal}
     (nil))
(insn 46 45 47 2 (parallel [
            (set (reg:SI 104)
                (and:SI (reg:SI 103)
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 discrim 1 565 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 103)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 47 46 48 2 (parallel [
            (set (reg:SI 105)
                (ior:SI (reg:SI 104)
                    (reg:SI 102)))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 discrim 1 603 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 104)
        (expr_list:REG_DEAD (reg:SI 102)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 48 47 49 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 D.3269+8 S4 A64])
        (reg:SI 105)) "test.c":39:16 discrim 1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 105)
        (nil)))
(insn 49 48 50 2 (set (reg:DI 106)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 D.3269+0 S8 A64])) "test.c":39:16 discrim 2 82 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:SI 107)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 D.3269+8 S4 A64])) "test.c":39:16 discrim 2 83 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (reg:DI 5 di)
        (reg:DI 106)) "test.c":39:16 discrim 2 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 106)
        (nil)))
(insn 52 51 53 2 (set (reg:SI 4 si)
        (reg:SI 107)) "test.c":39:16 discrim 2 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 107)
        (nil)))
(call_insn 53 52 54 2 (set (parallel:BLK [
                (expr_list:REG_DEP_TRUE (reg:TI 0 ax)
                    (const_int 0 [0]))
            ])
        (call (mem:QI (symbol_ref:DI ("fn") [flags 0x3]  <function_decl 0x7fb06a9df600 fn>) [0 fn S1 A8])
            (const_int 0 [0]))) "test.c":39:16 discrim 2 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list (use (reg:SI 4 si))
        (expr_list (use (reg:DI 5 di))
            (nil))))
(insn 54 53 55 2 (set (reg:TI 108)
        (reg:TI 0 ax)) "test.c":39:16 discrim 2 81 {*movti_internal}
     (expr_list:REG_DEAD (reg:TI 0 ax)
        (nil)))
(insn 55 54 57 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 D.3270+0 S8 A32])
        (subreg:DI (reg:TI 108) 0)) "test.c":39:16 discrim 2 82 {*movdi_internal}
     (nil))
(insn 57 55 58 2 (set (reg:SI 110)
        (subreg:SI (reg:TI 108) 8)) "test.c":39:16 discrim 2 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:TI 108)
        (nil)))
(insn 58 57 59 2 (set (reg:SI 111)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 D.3270+8 S4 A32])) "test.c":39:16 discrim 2 83 {*movsi_internal}
     (nil))
(insn 59 58 60 2 (parallel [
            (set (reg:SI 112)
                (and:SI (reg:SI 111)
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 discrim 2 565 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 111)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 60 59 61 2 (parallel [
            (set (reg:SI 113)
                (ior:SI (reg:SI 112)
                    (reg:SI 110)))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 discrim 2 603 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 112)
        (expr_list:REG_DEAD (reg:SI 110)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 61 60 62 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 D.3270+8 S4 A32])
        (reg:SI 113)) "test.c":39:16 discrim 2 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 113)
        (nil)))
(insn 62 61 63 2 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 63 62 64 2 (set (reg:DI 115)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [1 D.3267+0 S8 A64])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 64 63 65 2 (set (mem/c:DI (reg/f:DI 114) [1 <retval>._+0 S8 A32])
        (reg:DI 115)) "test.c":36:12 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 115)
        (nil)))
(insn 65 64 66 2 (set (reg:SI 116)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [1 D.3267+8 S4 A64])) "test.c":36:12 83 {*movsi_internal}
     (nil))
(insn 66 65 67 2 (set (mem/c:SI (plus:DI (reg/f:DI 114)
                (const_int 8 [0x8])) [1 <retval>._+8 S4 A32])
        (reg:SI 116)) "test.c":36:12 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 116)
        (expr_list:REG_DEAD (reg/f:DI 114)
            (nil))))
(insn 67 66 68 2 (set (reg/f:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 68 67 69 2 (set (mem/c:SI (plus:DI (reg/f:DI 117)
                (const_int 12 [0xc])) [3 <retval>.__+0 S4 A32])
        (const_int 42424242 [0x28757b2])) "test.c":36:12 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117)
        (nil)))
(insn 69 68 70 2 (set (reg/f:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 70 69 71 2 (set (reg:DI 119)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 D.3270+0 S8 A32])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 71 70 72 2 (set (mem/c:DI (plus:DI (reg/f:DI 118)
                (const_int 16 [0x10])) [1 <retval>.___+0 S8 A32])
        (reg:DI 119)) "test.c":36:12 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 119)
        (nil)))
(insn 72 71 73 2 (set (reg:SI 120)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [1 D.3270+8 S4 A32])) "test.c":36:12 83 {*movsi_internal}
     (nil))
(insn 73 72 79 2 (set (mem/c:SI (plus:DI (reg/f:DI 118)
                (const_int 24 [0x18])) [1 <retval>.___+8 S4 A32])
        (reg:SI 120)) "test.c":36:12 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 120)
        (expr_list:REG_DEAD (reg/f:DI 118)
            (nil))))
(insn 79 73 80 2 (set (reg/i:DI 0 ax)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])) "test.c":41:1 82 {*movdi_internal}
     (nil))
(insn 80 79 0 2 (use (reg/i:DI 0 ax)) "test.c":41:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function fact (fact, funcdef_no=3, decl_uid=2854, cgraph_uid=4, symbol_order=3)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r89,l0) best AREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r82,l0) best DIREG, allocno GENERAL_REGS

  a0(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:10000 NO_REX_SSE_REGS:10000 SSE_REGS:10000 MMX_REGS:20000 INT_SSE_REGS:20000 ALL_REGS:302000 MEM:5000
  a2(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:21000 INT_SSE_REGS:21000 ALL_REGS:314000 MEM:9000
  a3(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a4(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a5(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:4000 NO_REX_SSE_REGS:4000 SSE_REGS:4000 MMX_REGS:20000 INT_SSE_REGS:20000 ALL_REGS:208000 MEM:9000
  a6(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:21000 INT_SSE_REGS:21000 ALL_REGS:314000 MEM:9000
  a7(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a8(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 32(l0): point = 0
   Insn 31(l0): point = 2
   Insn 27(l0): point = 4
   Insn 24(l0): point = 7
   Insn 23(l0): point = 9
   Insn 22(l0): point = 11
   Insn 21(l0): point = 13
   Insn 20(l0): point = 15
   Insn 19(l0): point = 17
   Insn 18(l0): point = 19
   Insn 17(l0): point = 21
   Insn 16(l0): point = 23
   Insn 15(l0): point = 25
   Insn 14(l0): point = 27
   Insn 34(l0): point = 30
   Insn 9(l0): point = 32
   Insn 7(l0): point = 35
   Insn 6(l0): point = 37
   Insn 2(l0): point = 39
 a0(r89): [3..4]
 a1(r88): [30..32] [5..7]
 a2(r87): [8..9]
 a3(r86): [10..11]
 a4(r85): [10..15]
 a5(r91): [12..13]
 a6(r84): [16..17]
 a7(r83): [18..19]
 a8(r82): [24..25]
 a9(r90): [26..27]
Compressing live ranges: from 42 to 20 - 47%
Ranges after the compression:
 a0(r89): [0..1]
 a1(r88): [18..19] [2..3]
 a2(r87): [4..5]
 a3(r86): [6..7]
 a4(r85): [6..9]
 a5(r91): [8..9]
 a6(r84): [10..11]
 a7(r83): [12..13]
 a8(r82): [14..15]
 a9(r90): [16..17]
  pref0:a0(r89)<-hr0@1500
  pref1:a7(r83)<-hr0@1500
  pref2:a8(r82)<-hr5@1500
  regions=1, blocks=6, points=20
    allocnos=10 (big 0), copies=0, conflicts=0, ranges=11
Disposition:
    8:r82  l0     0    7:r83  l0     0    6:r84  l0     0    4:r85  l0     1
    3:r86  l0     0    2:r87  l0     0    1:r88  l0     0    0:r89  l0     0
    9:r90  l0     0    5:r91  l0     0
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


fact

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,5u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,4u} r17={4d,1u} r18={1d} r19={1d,9u,1e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={2d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} 
;;    total ref usage 143{102d,40u,1e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])
        (reg:DI 5 di [ a ])) "test.c":43:26 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ a ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])
            (const_int 0 [0]))) "test.c":44:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "test.c":44:8 995 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 12)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 88
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 34 3 (set (reg:SI 88 [ _7 ])
        (const_int 1 [0x1])) "test.c":45:16 83 {*movsi_internal}
     (nil))
(jump_insn 34 9 35 3 (set (pc)
        (label_ref 25)) "test.c":45:16 996 {jump}
     (nil)
 -> 25)
;;  succ:       5 [always]  test.c:45:16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88

(barrier 35 34 12)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 90 91
(code_label 12 35 13 4 8 (nil) [1 uses])
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:DI 90)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])) "test.c":48:16 82 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (parallel [
            (set (reg:DI 82 [ _1 ])
                (plus:DI (reg:DI 90)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":48:16 247 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 90)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])
                    (const_int -1 [0xffffffffffffffff]))
                (nil)))))
(insn 16 15 17 4 (set (reg:DI 5 di)
        (reg:DI 82 [ _1 ])) "test.c":48:16 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
        (nil)))
(call_insn 17 16 18 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fact") [flags 0x3]  <function_decl 0x7fb06a9dfc00 fact>) [0 fact S1 A8])
            (const_int 0 [0]))) "test.c":48:16 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 17 19 4 (set (reg:SI 83 [ _2 ])
        (reg:SI 0 ax)) "test.c":48:16 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 19 18 20 4 (set (reg:DI 84 [ _3 ])
        (sign_extend:DI (reg:SI 83 [ _2 ]))) "test.c":48:16 discrim 1 160 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
        (nil)))
(insn 20 19 21 4 (set (reg:SI 85 [ _4 ])
        (subreg:SI (reg:DI 84 [ _3 ]) 0)) "test.c":48:14 discrim 1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
        (nil)))
(insn 21 20 22 4 (set (reg:DI 91)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])) "test.c":48:14 discrim 1 82 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 86 [ _5 ])
        (subreg:SI (reg:DI 91) 0)) "test.c":48:14 discrim 1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (nil)))
(insn 23 22 24 4 (parallel [
            (set (reg:SI 87 [ _6 ])
                (mult:SI (reg:SI 85 [ _4 ])
                    (reg:SI 86 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":48:14 discrim 1 469 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 86 [ _5 ])
        (expr_list:REG_DEAD (reg:SI 85 [ _4 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 24 23 25 4 (set (reg:SI 88 [ _7 ])
        (reg:SI 87 [ _6 ])) "test.c":48:14 discrim 1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ _6 ])
        (nil)))
;;  succ:       5 (FALLTHRU) test.c:48:14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU) test.c:48:14
;;              3 [always]  test.c:45:16
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  def 	 0 [ax] 89
(code_label 25 24 26 5 9 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 31 5 (set (reg:SI 89 [ <retval> ])
        (reg:SI 88 [ _7 ])) "test.c":49:1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ _7 ])
        (nil)))
(insn 31 27 32 5 (set (reg/i:SI 0 ax)
        (reg:SI 89 [ <retval> ])) "test.c":49:1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89 [ <retval> ])
        (nil)))
(insn 32 31 0 5 (use (reg/i:SI 0 ax)) "test.c":49:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function debug__push_hex (debug__push_hex, funcdef_no=4, decl_uid=3232, cgraph_uid=5, symbol_order=4)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r98,l0) best AREG, allocno GENERAL_REGS
    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r97,l0) best DIREG, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r91,l0) best AREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r87,l0) best SIREG, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r85,l0) best CREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:4000 NO_REX_SSE_REGS:4000 SSE_REGS:4000 MMX_REGS:14000 INT_SSE_REGS:14000 ALL_REGS:202000 MEM:4000
  a2(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:21000 INT_SSE_REGS:21000 ALL_REGS:314000 MEM:9000
  a3(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a6(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r98,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:12000
  a8(r97,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a10(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a11(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:21000 INT_SSE_REGS:21000 ALL_REGS:314000 MEM:9000
  a12(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a14(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a16(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:12000
  a17(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:214000 MEM:12000
  a19(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000

   Insn 65(l0): point = 0
   Insn 64(l0): point = 2
   Insn 60(l0): point = 4
   Insn 57(l0): point = 6
   Insn 56(l0): point = 8
   Insn 55(l0): point = 10
   Insn 47(l0): point = 13
   Insn 46(l0): point = 15
   Insn 45(l0): point = 17
   Insn 44(l0): point = 19
   Insn 43(l0): point = 21
   Insn 42(l0): point = 23
   Insn 41(l0): point = 25
   Insn 40(l0): point = 27
   Insn 39(l0): point = 29
   Insn 38(l0): point = 31
   Insn 37(l0): point = 33
   Insn 36(l0): point = 35
   Insn 35(l0): point = 37
   Insn 34(l0): point = 39
   Insn 33(l0): point = 41
   Insn 32(l0): point = 43
   Insn 31(l0): point = 45
   Insn 30(l0): point = 47
   Insn 29(l0): point = 49
   Insn 28(l0): point = 51
   Insn 53(l0): point = 54
   Insn 52(l0): point = 56
   Insn 51(l0): point = 58
   Insn 67(l0): point = 61
   Insn 24(l0): point = 63
   Insn 21(l0): point = 66
   Insn 20(l0): point = 68
   Insn 19(l0): point = 70
   Insn 18(l0): point = 72
   Insn 16(l0): point = 75
   Insn 15(l0): point = 77
   Insn 14(l0): point = 79
   Insn 13(l0): point = 81
   Insn 12(l0): point = 83
   Insn 11(l0): point = 85
   Insn 10(l0): point = 87
   Insn 6(l0): point = 89
   Insn 5(l0): point = 91
   Insn 4(l0): point = 93
   Insn 3(l0): point = 95
   Insn 2(l0): point = 97
 a0(r91): [3..4]
 a1(r90): [5..6]
 a2(r89): [7..8]
 a3(r101): [9..10]
 a4(r100): [57..58]
 a5(r88): [16..17]
 a6(r99): [18..19]
 a7(r98): [22..23]
 a8(r97): [30..37]
 a9(r87): [32..39]
 a10(r85): [36..45]
 a11(r86): [40..41]
 a12(r96): [42..43]
 a13(r84): [46..47]
 a14(r95): [48..49]
 a15(r83): [67..72]
 a16(r94): [69..70]
 a17(r93): [78..79]
 a18(r92): [82..83]
 a19(r82): [86..87]
Compressing live ranges: from 100 to 34 - 34%
Ranges after the compression:
 a0(r91): [0..1]
 a1(r90): [2..3]
 a2(r89): [4..5]
 a3(r101): [6..7]
 a4(r100): [24..25]
 a5(r88): [8..9]
 a6(r99): [10..11]
 a7(r98): [12..13]
 a8(r97): [14..15]
 a9(r87): [14..15]
 a10(r85): [14..19]
 a11(r86): [16..17]
 a12(r96): [18..19]
 a13(r84): [20..21]
 a14(r95): [22..23]
 a15(r83): [26..27]
 a16(r94): [26..27]
 a17(r93): [28..29]
 a18(r92): [30..31]
 a19(r82): [32..33]
  pref0:a7(r98)<-hr0@1500
  pref1:a8(r97)<-hr5@1500
  pref2:a0(r91)<-hr0@1500
  pref3:a9(r87)<-hr4@1500
  pref4:a10(r85)<-hr2@1500
  regions=1, blocks=8, points=34
    allocnos=20 (big 0), copies=0, conflicts=0, ranges=20
Disposition:
   19:r82  l0     0   15:r83  l0     0   13:r84  l0     0   10:r85  l0     1
   11:r86  l0     0    9:r87  l0     4    5:r88  l0     0    2:r89  l0     0
    1:r90  l0     0    0:r91  l0     0   18:r92  l0     0   17:r93  l0     0
   16:r94  l0     1   14:r95  l0     0   12:r96  l0     0    8:r97  l0     0
    7:r98  l0     0    6:r99  l0     0    4:r100 l0     0    3:r101 l0     0
+++Costs: overall -5000, reg -5000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


debug__push_hex

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,7u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,6u} r17={10d,2u} r18={1d} r19={1d,38u,4e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d,1u} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,2u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} 
;;    total ref usage 220{121d,95u,4e} in 47{46 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  def 	 17 [flags] 82 92 93
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [7 buffer_start+0 S8 A64])
        (reg:DI 5 di [ buffer_start ])) "test.c":53:135 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ buffer_start ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
        (reg:DI 4 si [ buffer_top ])) "test.c":53:135 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ buffer_top ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [7 buffer_end+0 S8 A64])
        (reg:DI 1 dx [ buffer_end ])) "test.c":53:135 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ buffer_end ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
        (reg:DI 2 cx [ bytes ])) "test.c":53:135 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ bytes ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -68 [0xffffffffffffffbc])) [3 bytes_size+0 S4 A32])
        (reg:SI 36 r8 [ bytes_size ])) "test.c":53:135 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 36 r8 [ bytes_size ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:DI 82 [ _1 ])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -68 [0xffffffffffffffbc])) [3 bytes_size+0 S4 A32]))) "test.c":54:19 151 {*zero_extendsidi2}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
                    (reg:DI 82 [ _1 ])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":54:11 247 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":55:14 82 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [7 buffer_top_start+0 S8 A64])
        (reg/f:DI 92)) "test.c":55:14 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":57:8 82 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:CC 17 flags)
        (compare:CC (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])) [7 buffer_start+0 S8 A64])
            (reg/f:DI 93))) "test.c":57:8 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (nil)))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "test.c":57:8 995 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 94
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg/f:DI 83 [ buffer_top.0_2 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":58:20 82 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 94)
                (plus:DI (reg/f:DI 83 [ buffer_top.0_2 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":58:20 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 20 19 21 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
        (reg:DI 94)) "test.c":58:20 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(insn 21 20 22 3 (set (mem:QI (reg/f:DI 83 [ buffer_top.0_2 ]) [0 *buffer_top.0_2+0 S1 A8])
        (const_int 32 [0x20])) "test.c":58:23 85 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ buffer_top.0_2 ])
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 22 21 23 4 11 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 67 4 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 bytes_index+0 S4 A32])
        (const_int 0 [0])) "test.c":61:19 83 {*movsi_internal}
     (nil))
(jump_insn 67 24 68 4 (set (pc)
        (label_ref 48)) "test.c":61:5 996 {jump}
     (nil)
 -> 48)
;;  succ:       6 [always]  test.c:61:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 68 67 50)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 86 87 88 95 96 97 98 99
(code_label 50 68 27 5 13 (nil) [1 uses])
(note 27 50 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":62:17 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 29 28 30 5 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])) "test.c":64:31 82 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:QI 84 [ _3 ])
        (mem:QI (reg/f:DI 95) [0 *bytes_26+0 S1 A8])) "test.c":64:31 85 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95)
        (nil)))
(insn 31 30 32 5 (set (reg:SI 85 [ _4 ])
        (zero_extend:SI (reg:QI 84 [ _3 ]))) "test.c":62:33 156 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 84 [ _3 ])
        (nil)))
(insn 32 31 33 5 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [7 buffer_end+0 S8 A64])) "test.c":63:36 82 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg:DI 86 [ _5 ])
                (minus:DI (reg/f:DI 96)
                    (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":63:36 325 {*subdi_1}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -56 [0xffffffffffffffc8])) [7 buffer_end+0 S8 A64])
                    (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64]))
                (nil)))))
(insn 34 33 35 5 (set (reg:DI 87 [ _6 ])
        (reg:DI 86 [ _5 ])) "test.c":62:33 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86 [ _5 ])
        (nil)))
(insn 35 34 36 5 (set (reg:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":62:33 82 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 2 cx)
        (reg:SI 85 [ _4 ])) "test.c":62:33 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ _4 ])
        (nil)))
(insn 37 36 38 5 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb06a65c360 *.LC0>)) "test.c":62:33 82 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 4 si)
        (reg:DI 87 [ _6 ])) "test.c":62:33 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87 [ _6 ])
        (nil)))
(insn 39 38 40 5 (set (reg:DI 5 di)
        (reg:DI 97)) "test.c":62:33 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil)))
(insn 40 39 41 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":62:33 85 {*movqi_internal}
     (nil))
(call_insn 41 40 42 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("snprintf") [flags 0x41]  <function_decl 0x7fb06a931800 snprintf>) [0 __builtin_snprintf S1 A8])
            (const_int 0 [0]))) "test.c":62:33 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 42 41 43 5 (set (reg:SI 98)
        (reg:SI 0 ax)) "test.c":62:33 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 43 42 44 5 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [3 bytes_written+0 S4 A32])
        (reg:SI 98)) "test.c":62:33 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 98)
        (nil)))
(insn 44 43 45 5 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [3 bytes_written+0 S4 A32])) "test.c":66:20 83 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 88 [ _7 ])
        (sign_extend:DI (reg:SI 99))) "test.c":66:20 160 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(insn 46 45 47 5 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
                    (reg:DI 88 [ _7 ])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":66:20 247 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 88 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 47 46 48 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -4 [0xfffffffffffffffc])) [3 bytes_index+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 bytes_index+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":61:62 discrim 3 246 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [always]  test.c:61:5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 100
(code_label 48 47 49 6 12 (nil) [1 uses])
(note 49 48 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 49 52 6 (set (reg:SI 100)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 bytes_index+0 S4 A32])) "test.c":61:48 discrim 1 83 {*movsi_internal}
     (nil))
(insn 52 51 53 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 100)
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -68 [0xffffffffffffffbc])) [3 bytes_size+0 S4 A32]))) "test.c":61:48 discrim 1 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 100)
        (nil)))
(jump_insn 53 52 54 6 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "test.c":61:48 discrim 1 995 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 50)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 89 90 91 101
(note 54 53 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 7 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":69:23 82 {*movdi_internal}
     (nil))
(insn 56 55 57 7 (parallel [
            (set (reg:DI 89 [ _8 ])
                (minus:DI (reg/f:DI 101)
                    (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -16 [0xfffffffffffffff0])) [7 buffer_top_start+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":69:23 325 {*subdi_1}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
                    (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -16 [0xfffffffffffffff0])) [7 buffer_top_start+0 S8 A64]))
                (nil)))))
(insn 57 56 60 7 (set (reg:SI 90 [ _25 ])
        (subreg:SI (reg:DI 89 [ _8 ]) 0)) "test.c":69:23 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 89 [ _8 ])
        (nil)))
(insn 60 57 64 7 (set (reg:SI 91 [ <retval> ])
        (reg:SI 90 [ _25 ])) "test.c":69:23 discrim 1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90 [ _25 ])
        (nil)))
(insn 64 60 65 7 (set (reg/i:SI 0 ax)
        (reg:SI 91 [ <retval> ])) "test.c":70:1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ <retval> ])
        (nil)))
(insn 65 64 0 7 (use (reg/i:SI 0 ax)) "test.c":70:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function debug__push_pointer (debug__push_pointer, funcdef_no=5, decl_uid=3245, cgraph_uid=6, symbol_order=5)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r99,l0) best AREG, allocno GENERAL_REGS
    r98: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r98,l0) best DIREG, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r91,l0) best AREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r87,l0) best SIREG, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r85,l0) best CREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:4000 NO_REX_SSE_REGS:4000 SSE_REGS:4000 MMX_REGS:14000 INT_SSE_REGS:14000 ALL_REGS:202000 MEM:4000
  a2(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:21000 INT_SSE_REGS:21000 ALL_REGS:314000 MEM:9000
  a3(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a5(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r99,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:12000
  a7(r98,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a9(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a10(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:21000 INT_SSE_REGS:21000 ALL_REGS:314000 MEM:9000
  a11(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a13(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:12000
  a15(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:214000 MEM:12000
  a16(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a17(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:320000 MEM:12000
  a18(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:214000 MEM:12000

   Insn 68(l0): point = 0
   Insn 67(l0): point = 2
   Insn 63(l0): point = 4
   Insn 60(l0): point = 6
   Insn 59(l0): point = 8
   Insn 58(l0): point = 10
   Insn 49(l0): point = 13
   Insn 48(l0): point = 15
   Insn 47(l0): point = 17
   Insn 46(l0): point = 19
   Insn 45(l0): point = 21
   Insn 44(l0): point = 23
   Insn 43(l0): point = 25
   Insn 42(l0): point = 27
   Insn 41(l0): point = 29
   Insn 40(l0): point = 31
   Insn 39(l0): point = 33
   Insn 38(l0): point = 35
   Insn 37(l0): point = 37
   Insn 36(l0): point = 39
   Insn 35(l0): point = 41
   Insn 34(l0): point = 43
   Insn 33(l0): point = 45
   Insn 32(l0): point = 47
   Insn 31(l0): point = 49
   Insn 30(l0): point = 51
   Insn 56(l0): point = 54
   Insn 55(l0): point = 56
   Insn 70(l0): point = 59
   Insn 26(l0): point = 61
   Insn 25(l0): point = 63
   Insn 24(l0): point = 65
   Insn 23(l0): point = 67
   Insn 22(l0): point = 69
   Insn 21(l0): point = 71
   Insn 18(l0): point = 74
   Insn 17(l0): point = 76
   Insn 16(l0): point = 78
   Insn 15(l0): point = 80
   Insn 13(l0): point = 83
   Insn 12(l0): point = 85
   Insn 11(l0): point = 87
   Insn 10(l0): point = 89
   Insn 9(l0): point = 91
   Insn 5(l0): point = 93
   Insn 4(l0): point = 95
   Insn 3(l0): point = 97
   Insn 2(l0): point = 99
 a0(r91): [3..4]
 a1(r90): [5..6]
 a2(r89): [7..8]
 a3(r101): [9..10]
 a4(r88): [16..17]
 a5(r100): [18..19]
 a6(r99): [22..23]
 a7(r98): [30..37]
 a8(r87): [32..39]
 a9(r85): [36..45]
 a10(r86): [40..41]
 a11(r97): [42..43]
 a12(r84): [46..47]
 a13(r96): [48..49]
 a14(r95): [66..67]
 a15(r83): [70..71]
 a16(r82): [75..80]
 a17(r94): [77..78]
 a18(r93): [86..87]
 a19(r92): [90..91]
Compressing live ranges: from 102 to 34 - 33%
Ranges after the compression:
 a0(r91): [0..1]
 a1(r90): [2..3]
 a2(r89): [4..5]
 a3(r101): [6..7]
 a4(r88): [8..9]
 a5(r100): [10..11]
 a6(r99): [12..13]
 a7(r98): [14..15]
 a8(r87): [14..15]
 a9(r85): [14..19]
 a10(r86): [16..17]
 a11(r97): [18..19]
 a12(r84): [20..21]
 a13(r96): [22..23]
 a14(r95): [24..25]
 a15(r83): [26..27]
 a16(r82): [28..29]
 a17(r94): [28..29]
 a18(r93): [30..31]
 a19(r92): [32..33]
  pref0:a6(r99)<-hr0@1500
  pref1:a7(r98)<-hr5@1500
  pref2:a0(r91)<-hr0@1500
  pref3:a8(r87)<-hr4@1500
  pref4:a9(r85)<-hr2@1500
  regions=1, blocks=8, points=34
    allocnos=20 (big 0), copies=0, conflicts=0, ranges=20
Disposition:
   16:r82  l0     0   15:r83  l0     0   12:r84  l0     0    9:r85  l0     1
   10:r86  l0     0    8:r87  l0     4    4:r88  l0     0    2:r89  l0     0
    1:r90  l0     0    0:r91  l0     0   19:r92  l0     0   18:r93  l0     0
   17:r94  l0     1   14:r95  l0     0   13:r96  l0     0   11:r97  l0     0
    7:r98  l0     0    6:r99  l0     0    5:r100 l0     0    3:r101 l0     0
+++Costs: overall -5000, reg -5000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


debug__push_pointer

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,7u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,6u} r17={11d,2u} r18={1d} r19={1d,39u,4e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,2u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} 
;;    total ref usage 221{122d,95u,4e} in 48{47 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 92 93
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [7 buffer_start+0 S8 A64])
        (reg:DI 5 di [ buffer_start ])) "test.c":72:120 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ buffer_start ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
        (reg:DI 4 si [ buffer_top ])) "test.c":72:120 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ buffer_top ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -72 [0xffffffffffffffb8])) [7 buffer_end+0 S8 A64])
        (reg:DI 1 dx [ buffer_end ])) "test.c":72:120 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ buffer_end ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [7 pointer+0 S8 A64])
        (reg:DI 2 cx [ pointer ])) "test.c":72:120 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ pointer ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":73:14 82 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [7 buffer_top_start+0 S8 A64])
        (reg/f:DI 92)) "test.c":73:14 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":75:8 82 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CC 17 flags)
        (compare:CC (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -56 [0xffffffffffffffc8])) [7 buffer_start+0 S8 A64])
            (reg/f:DI 93))) "test.c":75:8 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (nil)))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "test.c":75:8 995 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 94
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:DI 82 [ buffer_top.1_1 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":76:20 82 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 94)
                (plus:DI (reg/f:DI 82 [ buffer_top.1_1 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":76:20 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 17 16 18 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
        (reg:DI 94)) "test.c":76:20 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(insn 18 17 19 3 (set (mem:QI (reg/f:DI 82 [ buffer_top.1_1 ]) [0 *buffer_top.1_1+0 S1 A8])
        (const_int 32 [0x20])) "test.c":76:23 85 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ buffer_top.1_1 ])
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 95
(code_label 19 18 20 4 16 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:DI 83 [ pointer.2_2 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [7 pointer+0 S8 A64])) "test.c":79:20 82 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [6 val+0 S8 A64])
        (reg:DI 83 [ pointer.2_2 ])) "test.c":79:14 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 83 [ pointer.2_2 ])
        (nil)))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 95)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":80:14 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 24 23 25 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
        (reg:DI 95)) "test.c":80:14 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(insn 25 24 26 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":81:7 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 26 25 70 4 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 bytes_index+0 S4 A32])
        (const_int 0 [0])) "test.c":82:19 83 {*movsi_internal}
     (nil))
(jump_insn 70 26 71 4 (set (pc)
        (label_ref 50)) "test.c":82:5 996 {jump}
     (nil)
 -> 50)
;;  succ:       6 [always]  test.c:82:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 71 70 52)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 86 87 88 96 97 98 99 100
(code_label 52 71 29 5 18 (nil) [1 uses])
(note 29 52 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":83:17 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 5 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])) "test.c":85:31 82 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:QI 84 [ _3 ])
        (mem:QI (reg/f:DI 96) [0 *p_28+0 S1 A8])) "test.c":85:31 85 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (nil)))
(insn 33 32 34 5 (set (reg:SI 85 [ _4 ])
        (zero_extend:SI (reg:QI 84 [ _3 ]))) "test.c":83:33 156 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 84 [ _3 ])
        (nil)))
(insn 34 33 35 5 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -72 [0xffffffffffffffb8])) [7 buffer_end+0 S8 A64])) "test.c":84:36 82 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (parallel [
            (set (reg:DI 86 [ _5 ])
                (minus:DI (reg/f:DI 97)
                    (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":84:36 325 {*subdi_1}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -72 [0xffffffffffffffb8])) [7 buffer_end+0 S8 A64])
                    (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64]))
                (nil)))))
(insn 36 35 37 5 (set (reg:DI 87 [ _6 ])
        (reg:DI 86 [ _5 ])) "test.c":83:33 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86 [ _5 ])
        (nil)))
(insn 37 36 38 5 (set (reg:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":83:33 82 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:SI 2 cx)
        (reg:SI 85 [ _4 ])) "test.c":83:33 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ _4 ])
        (nil)))
(insn 39 38 40 5 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb06a65c360 *.LC0>)) "test.c":83:33 82 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 4 si)
        (reg:DI 87 [ _6 ])) "test.c":83:33 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87 [ _6 ])
        (nil)))
(insn 41 40 42 5 (set (reg:DI 5 di)
        (reg:DI 98)) "test.c":83:33 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 98)
        (nil)))
(insn 42 41 43 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":83:33 85 {*movqi_internal}
     (nil))
(call_insn 43 42 44 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("snprintf") [flags 0x41]  <function_decl 0x7fb06a931800 snprintf>) [0 __builtin_snprintf S1 A8])
            (const_int 0 [0]))) "test.c":83:33 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 44 43 45 5 (set (reg:SI 99)
        (reg:SI 0 ax)) "test.c":83:33 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 45 44 46 5 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 bytes_written+0 S4 A32])
        (reg:SI 99)) "test.c":83:33 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(insn 46 45 47 5 (set (reg:SI 100)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 bytes_written+0 S4 A32])) "test.c":87:20 83 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 88 [ _7 ])
        (sign_extend:DI (reg:SI 100))) "test.c":87:20 160 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 100)
        (nil)))
(insn 48 47 49 5 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
                    (reg:DI 88 [ _7 ])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":87:20 247 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 88 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 49 48 50 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -12 [0xfffffffffffffff4])) [3 bytes_index+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -12 [0xfffffffffffffff4])) [3 bytes_index+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":82:68 discrim 3 246 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [always]  test.c:82:5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 50 49 51 6 17 (nil) [1 uses])
(note 51 50 55 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 55 51 56 6 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [3 bytes_index+0 S4 A32])
            (const_int 7 [0x7]))) "test.c":82:48 discrim 1 11 {*cmpsi_1}
     (nil))
(jump_insn 56 55 57 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "test.c":82:48 discrim 1 995 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 52)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 89 90 91 101
(note 57 56 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 7 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":90:23 82 {*movdi_internal}
     (nil))
(insn 59 58 60 7 (parallel [
            (set (reg:DI 89 [ _8 ])
                (minus:DI (reg/f:DI 101)
                    (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -24 [0xffffffffffffffe8])) [7 buffer_top_start+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":90:23 325 {*subdi_1}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
                    (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -24 [0xffffffffffffffe8])) [7 buffer_top_start+0 S8 A64]))
                (nil)))))
(insn 60 59 63 7 (set (reg:SI 90 [ _26 ])
        (subreg:SI (reg:DI 89 [ _8 ]) 0)) "test.c":90:23 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 89 [ _8 ])
        (nil)))
(insn 63 60 67 7 (set (reg:SI 91 [ <retval> ])
        (reg:SI 90 [ _26 ])) "test.c":90:23 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90 [ _26 ])
        (nil)))
(insn 67 63 68 7 (set (reg/i:SI 0 ax)
        (reg:SI 91 [ <retval> ])) "test.c":91:1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ <retval> ])
        (nil)))
(insn 68 67 0 7 (use (reg/i:SI 0 ax)) "test.c":91:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function main (main, funcdef_no=6, decl_uid=3256, cgraph_uid=7, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r87,l0) best DIREG, allocno GENERAL_REGS
    r86: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r86,l0) best SIREG, allocno GENERAL_REGS
    r85: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r85,l0) best CREG, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r82,l0) best DREG, allocno GENERAL_REGS

  a0(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:4000 NO_REX_SSE_REGS:4000 SSE_REGS:4000 MMX_REGS:14000 INT_SSE_REGS:14000 ALL_REGS:202000 MEM:4000
  a2(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a3(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a4(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a5(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:52000 INT_SSE_REGS:52000 ALL_REGS:848000 MEM:22000
  a6(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:8000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 35(l0): point = 0
   Insn 34(l0): point = 2
   Insn 30(l0): point = 4
   Insn 27(l0): point = 6
   Insn 26(l0): point = 8
   Insn 25(l0): point = 10
   Insn 24(l0): point = 12
   Insn 23(l0): point = 14
   Insn 22(l0): point = 16
   Insn 21(l0): point = 18
   Insn 20(l0): point = 20
   Insn 19(l0): point = 22
   Insn 18(l0): point = 24
   Insn 17(l0): point = 26
   Insn 16(l0): point = 28
   Insn 15(l0): point = 30
   Insn 14(l0): point = 32
   Insn 13(l0): point = 34
   Insn 12(l0): point = 36
   Insn 11(l0): point = 38
   Insn 10(l0): point = 40
   Insn 9(l0): point = 42
   Insn 8(l0): point = 44
   Insn 7(l0): point = 46
   Insn 6(l0): point = 48
   Insn 5(l0): point = 50
 a0(r84): [3..4]
 a1(r83): [5..6]
 a2(r88): [11..12]
 a3(r87): [17..24]
 a4(r86): [19..26]
 a5(r82): [21..32]
 a6(r85): [23..28]
Compressing live ranges: from 53 to 8 - 15%
Ranges after the compression:
 a0(r84): [0..1]
 a1(r83): [2..3]
 a2(r88): [4..5]
 a3(r87): [6..7]
 a4(r86): [6..7]
 a5(r82): [6..7]
 a6(r85): [6..7]
  pref0:a2(r88)<-hr5@1500
  pref1:a3(r87)<-hr5@1500
  pref2:a4(r86)<-hr4@1500
  pref3:a6(r85)<-hr2@1500
  pref4:a0(r84)<-hr0@1500
  pref5:a5(r82)<-hr1@1500
  regions=1, blocks=3, points=8
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7
Disposition:
    5:r82  l0     0    1:r83  l0     0    0:r84  l0     0    6:r85  l0     1
    4:r86  l0     4    3:r87  l0     5    2:r88  l0     0
+++Costs: overall -6000, reg -6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d,2u} r1={4d,1u} r2={4d,1u} r4={4d,1u} r5={5d,2u} r6={1d,2u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,1u} r17={7d} r18={2d} r19={1d,16u} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r82={2d,2u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} 
;;    total ref usage 210{172d,38u,0e} in 26{24 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [7 ip+0 S8 A64])
        (const_int 2020719900335213067 [0x1c0b0a0b0a0b0a0b])) "test.c":94:14 82 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:TI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [0 buffer+0 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:TI (plus:DI (reg/f:DI 19 frame)
                (const_int -128 [0xffffffffffffff80])) [0 buffer+16 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:TI (plus:DI (reg/f:DI 19 frame)
                (const_int -112 [0xffffffffffffff90])) [0 buffer+32 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:TI (plus:DI (reg/f:DI 19 frame)
                (const_int -96 [0xffffffffffffffa0])) [0 buffer+48 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:TI (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 buffer+64 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:TI (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 buffer+80 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:TI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 buffer+96 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:TI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 buffer+112 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 82 [ _1 ])
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":97:5 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 15 14 16 2 (parallel [
            (set (reg/f:DI 82 [ _1 ])
                (plus:DI (reg/f:DI 82 [ _1 ])
                    (const_int 128 [0x80])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":97:5 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 16 15 17 2 (set (reg:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [7 ip+0 S8 A64])) "test.c":97:5 82 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:DI 86)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":97:5 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg:DI 87)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":97:5 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 19 18 20 2 (set (reg:DI 2 cx)
        (reg:DI 85)) "test.c":97:5 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 85)
        (nil)))
(insn 20 19 21 2 (set (reg:DI 1 dx)
        (reg/f:DI 82 [ _1 ])) "test.c":97:5 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 4 si)
        (reg:DI 86)) "test.c":97:5 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86)
        (nil)))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 87)) "test.c":97:5 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87)
        (nil)))
(call_insn 23 22 24 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("debug__push_pointer") [flags 0x3]  <function_decl 0x7fb06a62f100 debug__push_pointer>) [0 debug__push_pointer S1 A8])
            (const_int 0 [0]))) "test.c":97:5 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 24 23 25 2 (parallel [
            (set (reg:DI 88)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":98:5 247 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 88)) "test.c":98:5 82 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (nil)))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb06a931100 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test.c":98:5 1013 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 27 26 30 2 (set (reg:SI 83 [ _7 ])
        (const_int 0 [0])) "test.c":101:12 83 {*movsi_internal}
     (nil))
(insn 30 27 34 2 (set (reg:SI 84 [ <retval> ])
        (reg:SI 83 [ _7 ])) "test.c":102:1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ _7 ])
        (nil)))
(insn 34 30 35 2 (set (reg/i:SI 0 ax)
        (reg:SI 84 [ <retval> ])) "test.c":102:1 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 84 [ <retval> ])
        (nil)))
(insn 35 34 0 2 (use (reg/i:SI 0 ax)) "test.c":102:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

