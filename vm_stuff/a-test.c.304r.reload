
;; Function fn (fn, funcdef_no=0, decl_uid=2843, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=4,overall=11,losers=1 -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 5 in insn 10:  (0) Yp  (1) Yp  (2) ln {*addqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) m {*movhi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) Yp  (1) Yp  (2) ln {*addhi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=16,losers=2,rld_nregs=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =qm  (1) %0  (2) qn {*addqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 19:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=4,overall=21,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 22:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rmWz {*zero_extendsidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 34: point = 0, n_alt = -1
   Insn 33: point = 0, n_alt = -2
   Insn 29: point = 1, n_alt = -2
   Insn 28: point = 3, n_alt = 3
   Insn 27: point = 4, n_alt = 3
   Insn 26: point = 5, n_alt = 3
   Insn 25: point = 5, n_alt = -1
   Insn 22: point = 6, n_alt = 8
   Insn 21: point = 7, n_alt = 1
   Insn 20: point = 8, n_alt = 3
   Insn 19: point = 9, n_alt = 8
   Insn 18: point = 10, n_alt = -2
   Insn 17: point = 12, n_alt = 0
   Insn 16: point = 14, n_alt = -2
   Insn 15: point = 16, n_alt = 4
   Insn 14: point = 17, n_alt = 0
   Insn 13: point = 19, n_alt = 0
   Insn 12: point = 20, n_alt = 3
   Insn 11: point = 22, n_alt = 2
   Insn 10: point = 23, n_alt = 5
   Insn 9: point = 25, n_alt = 4
   Insn 5: point = 26, n_alt = 1
   Insn 4: point = 27, n_alt = 5
   Insn 3: point = 28, n_alt = -2
   Insn 2: point = 29, n_alt = -2
 r82: [24..25]
 r83: [9..23]
 r84: [21..22]
 r85: [8..20]
 r86: [18..19]
 r87: [7..17]
 r88: [15..16]
 r89: [13..14]
 r90: [11..12]
 r91: [6..10]
 r92: [0..1]
 r93: [27..29]
 r94: [26..28]
 r95: [2..5]
 r96: [3..4]
Compressing live ranges: from 30 to 20 - 66%
Ranges after the compression:
 r82: [16..17]
 r83: [4..15]
 r84: [14..15]
 r85: [4..13]
 r86: [12..13]
 r87: [4..11]
 r88: [10..11]
 r89: [8..9]
 r90: [6..7]
 r91: [4..5]
 r92: [0..1]
 r93: [18..19]
 r94: [18..19]
 r95: [2..3]
 r96: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 19
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 20
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 21
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 22
changing reg in insn 29
changing reg in insn 33
changing reg in insn 2
changing reg in insn 4
changing reg in insn 3
changing reg in insn 5
changing reg in insn 25
changing reg in insn 29
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
deleting insn with uid = 16.
deleting insn with uid = 18.
deleting insn with uid = 29.
deleting insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns


fn

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={5d,4u} r2={3d,2u} r4={3d,3u} r5={1d,1u} r6={1d,14u} r7={1d,2u} r17={4d} r19={1d,1u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 71{37d,34u,0e} in 21{21 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg:DI 1 dx [93])
        (reg:DI 5 di [ a ])) "test.c":16:16 82 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:SI 0 ax [94])
        (reg:SI 4 si [ a+8 ])) "test.c":16:16 83 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 a+0 S8 A32])
        (reg:DI 1 dx [93])) "test.c":16:16 82 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 a+8 S4 A32])
        (reg:SI 0 ax [94])) "test.c":16:16 83 {*movsi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:QI 0 ax [orig:82 _1 ] [82])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 a._+0 S1 A32])) "test.c":18:15 85 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:QI 2 cx [orig:83 _2 ] [83])
                (plus:QI (reg:QI 0 ax [orig:82 _1 ] [82])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":18:18 250 {*addqi_1}
     (nil))
(insn 11 10 12 2 (set (reg:HI 0 ax [orig:84 _3 ] [84])
        (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [2 a.__+0 S2 A16])) "test.c":19:16 84 {*movhi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:HI 1 dx [orig:85 _4 ] [85])
                (plus:HI (reg:HI 0 ax [orig:84 _3 ] [84])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":19:20 249 {*addhi_1}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:86 _5 ] [86])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 a.___+0 S4 A32])) "test.c":20:17 83 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 0 ax [orig:87 _6 ] [87])
                (plus:SI (reg:SI 0 ax [orig:86 _5 ] [86])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":20:22 246 {*addsi_1}
     (nil))
(insn 15 14 17 2 (set (reg:QI 4 si [orig:88 _7 ] [88])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 a.____+0 S1 A32])) "test.c":21:18 85 {*movqi_internal}
     (nil))
(insn 17 15 19 2 (parallel [
            (set (reg:QI 4 si [orig:90 _9 ] [90])
                (plus:QI (reg:QI 4 si [orig:89 _8 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":21:24 250 {*addqi_1}
     (nil))
(insn 19 17 20 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 D.3261._+0 S1 A32])
        (reg:QI 2 cx [orig:83 _2 ] [83])) "test.c":17:12 85 {*movqi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -10 [0xfffffffffffffff6])) [2 D.3261.__+0 S2 A16])
        (reg:HI 1 dx [orig:85 _4 ] [85])) "test.c":17:12 84 {*movhi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 D.3261.___+0 S4 A32])
        (reg:SI 0 ax [orig:87 _6 ] [87])) "test.c":17:12 83 {*movsi_internal}
     (nil))
(insn 22 21 25 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 D.3261.____+0 S1 A32])
        (reg:QI 4 si [orig:91 _10 ] [91])) "test.c":17:12 85 {*movqi_internal}
     (nil))
(insn 25 22 26 2 (clobber (reg:TI 0 ax [95])) "test.c":17:12 -1
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [95])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 D.3261+0 S8 A32])) "test.c":17:12 82 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 2 cx [96])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [1 D.3261+8 S4 A32]))) "test.c":17:12 151 {*zero_extendsidi2}
     (nil))
(insn 28 27 34 2 (set (reg:DI 1 dx [+8 ])
        (reg:DI 2 cx [96])) "test.c":17:12 82 {*movdi_internal}
     (nil))
(insn 34 28 36 2 (use (reg:TI 0 ax)) "test.c":23:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 36 34 0 NOTE_INSN_DELETED)

;; Function fn2 (fn2, funcdef_no=1, decl_uid=2847, cgraph_uid=2, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =rm  (1) %0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 0
   Insn 2: point = 6, n_alt = 1
 r82: [2..3]
 r83: [0..1]
 r84: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r82: [2..3]
 r83: [0..1]
 r84: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 10.
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns


fn2

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={3d,3u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,2u} r17={1d} r19={1d,1u,1e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 33{21d,11u,1e} in 4{4 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 82 83 84
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 a+0 S4 A32])
        (reg:SI 5 di [ a ])) "test.c":25:24 83 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 ax [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 a+0 S4 A32])) "test.c":26:14 83 {*movsi_internal}
     (nil))
(insn 7 6 15 2 (parallel [
            (set (reg:SI 0 ax [orig:82 _2 ] [82])
                (plus:SI (reg:SI 0 ax [84])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":26:14 246 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 a+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 15 7 17 2 (use (reg/i:SI 0 ax)) "test.c":27:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function fn3 (fn3, funcdef_no=2, decl_uid=2849, cgraph_uid=3, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=112, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 6:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=2,overall=22,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 9:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =rm  (1) %0  (2) re {*iorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =rm  (1) %0  (2) re {*iorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =rm  (1) %0  (2) re {*iorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 55:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 59:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) re {*iorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 64:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 80: point = 0, n_alt = -1
   Insn 79: point = 0, n_alt = 3
   Insn 73: point = 0, n_alt = 1
   Insn 72: point = 1, n_alt = 0
   Insn 71: point = 2, n_alt = 5
   Insn 70: point = 3, n_alt = 3
   Insn 69: point = 4, n_alt = 3
   Insn 68: point = 5, n_alt = 1
   Insn 67: point = 6, n_alt = 3
   Insn 66: point = 7, n_alt = 1
   Insn 65: point = 8, n_alt = 0
   Insn 64: point = 9, n_alt = 5
   Insn 63: point = 10, n_alt = 3
   Insn 62: point = 11, n_alt = 3
   Insn 61: point = 12, n_alt = 1
   Insn 60: point = 13, n_alt = 0
   Insn 59: point = 15, n_alt = 0
   Insn 58: point = 17, n_alt = 0
   Insn 57: point = 18, n_alt = 0
   Insn 55: point = 20, n_alt = 5
   Insn 54: point = 20, n_alt = -2
   Insn 53: point = 21, n_alt = 0
   Insn 52: point = 21, n_alt = -2
   Insn 51: point = 22, n_alt = -2
   Insn 50: point = 23, n_alt = 0
   Insn 49: point = 24, n_alt = 3
   Insn 48: point = 25, n_alt = 1
   Insn 47: point = 26, n_alt = 0
   Insn 46: point = 28, n_alt = 0
   Insn 45: point = 30, n_alt = 0
   Insn 44: point = 31, n_alt = 0
   Insn 42: point = 33, n_alt = 5
   Insn 41: point = 33, n_alt = -2
   Insn 40: point = 34, n_alt = 0
   Insn 39: point = 34, n_alt = -2
   Insn 38: point = 35, n_alt = -2
   Insn 37: point = 36, n_alt = 0
   Insn 36: point = 37, n_alt = 3
   Insn 35: point = 38, n_alt = 1
   Insn 34: point = 39, n_alt = 0
   Insn 33: point = 41, n_alt = 0
   Insn 32: point = 43, n_alt = 0
   Insn 31: point = 44, n_alt = 0
   Insn 29: point = 46, n_alt = 5
   Insn 28: point = 46, n_alt = -2
   Insn 27: point = 47, n_alt = 0
   Insn 26: point = 47, n_alt = -2
   Insn 25: point = 48, n_alt = -2
   Insn 24: point = 49, n_alt = 0
   Insn 23: point = 50, n_alt = 3
   Insn 22: point = 51, n_alt = 1
   Insn 21: point = 52, n_alt = 0
   Insn 20: point = 54, n_alt = 0
   Insn 19: point = 56, n_alt = 0
   Insn 18: point = 57, n_alt = 0
   Insn 16: point = 59, n_alt = 5
   Insn 15: point = 59, n_alt = -2
   Insn 14: point = 60, n_alt = 0
   Insn 13: point = 60, n_alt = -2
   Insn 12: point = 61, n_alt = -2
   Insn 11: point = 62, n_alt = 0
   Insn 10: point = 63, n_alt = 3
   Insn 9: point = 64, n_alt = 8
   Insn 8: point = 64, n_alt = 1
   Insn 7: point = 64, n_alt = 3
   Insn 6: point = 64, n_alt = 8
   Insn 2: point = 64, n_alt = 5
 r82: [61..63]
 r83: [60..62]
 r84: [58..59]
 r86: [53..57]
 r87: [55..56]
 r88: [53..54]
 r89: [51..52]
 r90: [48..50]
 r91: [47..49]
 r92: [45..46]
 r94: [40..44]
 r95: [42..43]
 r96: [40..41]
 r97: [38..39]
 r98: [35..37]
 r99: [34..36]
 r100: [32..33]
 r102: [27..31]
 r103: [29..30]
 r104: [27..28]
 r105: [25..26]
 r106: [22..24]
 r107: [21..23]
 r108: [19..20]
 r110: [14..18]
 r111: [16..17]
 r112: [14..15]
 r113: [12..13]
 r114: [7..11]
 r115: [9..10]
 r116: [7..8]
 r117: [5..6]
 r118: [0..4]
 r119: [2..3]
 r120: [0..1]
Compressing live ranges: from 64 to 50 - 78%
Ranges after the compression:
 r82: [48..49]
 r83: [48..49]
 r84: [46..47]
 r86: [42..45]
 r87: [44..45]
 r88: [42..43]
 r89: [40..41]
 r90: [38..39]
 r91: [38..39]
 r92: [36..37]
 r94: [32..35]
 r95: [34..35]
 r96: [32..33]
 r97: [30..31]
 r98: [28..29]
 r99: [28..29]
 r100: [26..27]
 r102: [22..25]
 r103: [24..25]
 r104: [22..23]
 r105: [20..21]
 r106: [18..19]
 r107: [18..19]
 r108: [16..17]
 r110: [12..15]
 r111: [14..15]
 r112: [12..13]
 r113: [10..11]
 r114: [6..9]
 r115: [8..9]
 r116: [6..7]
 r117: [4..5]
 r118: [0..3]
 r119: [2..3]
 r120: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=112, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 13
changing reg in insn 15
changing reg in insn 18
changing reg in insn 21
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 24
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 34
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 37
changing reg in insn 39
changing reg in insn 41
changing reg in insn 44
changing reg in insn 47
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 50
changing reg in insn 52
changing reg in insn 54
changing reg in insn 57
changing reg in insn 60
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 64
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 73
changing reg in insn 71
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
deleting insn with uid = 15.
deleting insn with uid = 18.
deleting insn with uid = 28.
deleting insn with uid = 31.
deleting insn with uid = 41.
deleting insn with uid = 44.
deleting insn with uid = 54.
deleting insn with uid = 57.
starting the processing of deferred insns
ending the processing of deferred insns


fn3

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={25d,27u} r1={17d,12u} r2={5d} r4={9d,4u} r5={9d,5u} r6={1d,35u} r7={1d,6u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={12d} r18={4d} r19={1d,1u} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 424{334d,90u,0e} in 59{55 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 86 87 88 89 90 91 92 94 95 96 97 98 99 100 102 103 104 105 106 107 108 110 111 112 113 114 115 116 117 118 119 120
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])
        (reg:DI 5 di [ .result_ptr ])) "test.c":29:11 82 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 a._+0 S1 A32])
        (const_int 3 [0x3])) "test.c":30:9 85 {*movqi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -58 [0xffffffffffffffc6])) [2 a.__+0 S2 A16])
        (const_int 3443 [0xd73])) "test.c":30:9 84 {*movhi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [3 a.___+0 S4 A32])
        (const_int -89283 [0xfffffffffffea33d])) "test.c":30:9 83 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 a.____+0 S1 A32])
        (const_int -93 [0xffffffffffffffa3])) "test.c":30:9 85 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 1 dx [82])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [1 a+0 S8 A32])) "test.c":37:16 82 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [83])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [1 a+8 S4 A32])) "test.c":37:16 83 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 1 dx [82])) "test.c":37:16 82 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [83])) "test.c":37:16 83 {*movsi_internal}
     (nil))
(call_insn 14 13 16 2 (set (parallel:BLK [
                (expr_list:REG_DEP_TRUE (reg:TI 0 ax)
                    (const_int 0 [0]))
            ])
        (call (mem:QI (symbol_ref:DI ("fn") [flags 0x3]  <function_decl 0x7fb06a9df600 fn>) [0 fn S1 A8])
            (const_int 0 [0]))) "test.c":37:16 1013 {*call_value}
     (nil)
    (expr_list (use (reg:SI 4 si))
        (expr_list (use (reg:DI 5 di))
            (nil))))
(insn 16 14 19 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 D.3267+0 S8 A64])
        (reg:DI 0 ax [84])) "test.c":37:16 82 {*movdi_internal}
     (nil))
(insn 19 16 20 2 (set (reg:SI 0 ax [87])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 D.3267+8 S4 A64])) "test.c":37:16 83 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 0 ax [88])
                (and:SI (reg:SI 0 ax [87])
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":37:16 565 {*andsi_1}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg:SI 0 ax [89])
                (ior:SI (reg:SI 0 ax [88])
                    (reg:SI 1 dx [86])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":37:16 603 {*iorsi_1}
     (nil))
(insn 22 21 23 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 D.3267+8 S4 A64])
        (reg:SI 0 ax [89])) "test.c":37:16 83 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 1 dx [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [1 a+0 S8 A32])) "test.c":39:16 82 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [1 a+8 S4 A32])) "test.c":39:16 83 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 1 dx [90])) "test.c":39:16 82 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [91])) "test.c":39:16 83 {*movsi_internal}
     (nil))
(call_insn 27 26 29 2 (set (parallel:BLK [
                (expr_list:REG_DEP_TRUE (reg:TI 0 ax)
                    (const_int 0 [0]))
            ])
        (call (mem:QI (symbol_ref:DI ("fn") [flags 0x3]  <function_decl 0x7fb06a9df600 fn>) [0 fn S1 A8])
            (const_int 0 [0]))) "test.c":39:16 1013 {*call_value}
     (nil)
    (expr_list (use (reg:SI 4 si))
        (expr_list (use (reg:DI 5 di))
            (nil))))
(insn 29 27 32 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 D.3268+0 S8 A32])
        (reg:DI 0 ax [92])) "test.c":39:16 82 {*movdi_internal}
     (nil))
(insn 32 29 33 2 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 D.3268+8 S4 A32])) "test.c":39:16 83 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg:SI 0 ax [96])
                (and:SI (reg:SI 0 ax [95])
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 565 {*andsi_1}
     (nil))
(insn 34 33 35 2 (parallel [
            (set (reg:SI 0 ax [97])
                (ior:SI (reg:SI 0 ax [96])
                    (reg:SI 1 dx [94])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 603 {*iorsi_1}
     (nil))
(insn 35 34 36 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 D.3268+8 S4 A32])
        (reg:SI 0 ax [97])) "test.c":39:16 83 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (set (reg:DI 1 dx [98])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [1 D.3268+0 S8 A32])) "test.c":39:16 discrim 1 82 {*movdi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [1 D.3268+8 S4 A32])) "test.c":39:16 discrim 1 83 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:DI 5 di)
        (reg:DI 1 dx [98])) "test.c":39:16 discrim 1 82 {*movdi_internal}
     (nil))
(insn 39 38 40 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [99])) "test.c":39:16 discrim 1 83 {*movsi_internal}
     (nil))
(call_insn 40 39 42 2 (set (parallel:BLK [
                (expr_list:REG_DEP_TRUE (reg:TI 0 ax)
                    (const_int 0 [0]))
            ])
        (call (mem:QI (symbol_ref:DI ("fn") [flags 0x3]  <function_decl 0x7fb06a9df600 fn>) [0 fn S1 A8])
            (const_int 0 [0]))) "test.c":39:16 discrim 1 1013 {*call_value}
     (nil)
    (expr_list (use (reg:SI 4 si))
        (expr_list (use (reg:DI 5 di))
            (nil))))
(insn 42 40 45 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 D.3269+0 S8 A64])
        (reg:DI 0 ax [100])) "test.c":39:16 discrim 1 82 {*movdi_internal}
     (nil))
(insn 45 42 46 2 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 D.3269+8 S4 A64])) "test.c":39:16 discrim 1 83 {*movsi_internal}
     (nil))
(insn 46 45 47 2 (parallel [
            (set (reg:SI 0 ax [104])
                (and:SI (reg:SI 0 ax [103])
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 discrim 1 565 {*andsi_1}
     (nil))
(insn 47 46 48 2 (parallel [
            (set (reg:SI 0 ax [105])
                (ior:SI (reg:SI 0 ax [104])
                    (reg:SI 1 dx [102])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 discrim 1 603 {*iorsi_1}
     (nil))
(insn 48 47 49 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 D.3269+8 S4 A64])
        (reg:SI 0 ax [105])) "test.c":39:16 discrim 1 83 {*movsi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:DI 1 dx [106])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 D.3269+0 S8 A64])) "test.c":39:16 discrim 2 82 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 D.3269+8 S4 A64])) "test.c":39:16 discrim 2 83 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (reg:DI 5 di)
        (reg:DI 1 dx [106])) "test.c":39:16 discrim 2 82 {*movdi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [107])) "test.c":39:16 discrim 2 83 {*movsi_internal}
     (nil))
(call_insn 53 52 55 2 (set (parallel:BLK [
                (expr_list:REG_DEP_TRUE (reg:TI 0 ax)
                    (const_int 0 [0]))
            ])
        (call (mem:QI (symbol_ref:DI ("fn") [flags 0x3]  <function_decl 0x7fb06a9df600 fn>) [0 fn S1 A8])
            (const_int 0 [0]))) "test.c":39:16 discrim 2 1013 {*call_value}
     (nil)
    (expr_list (use (reg:SI 4 si))
        (expr_list (use (reg:DI 5 di))
            (nil))))
(insn 55 53 58 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 D.3270+0 S8 A32])
        (reg:DI 0 ax [108])) "test.c":39:16 discrim 2 82 {*movdi_internal}
     (nil))
(insn 58 55 59 2 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 D.3270+8 S4 A32])) "test.c":39:16 discrim 2 83 {*movsi_internal}
     (nil))
(insn 59 58 60 2 (parallel [
            (set (reg:SI 0 ax [112])
                (and:SI (reg:SI 0 ax [111])
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 discrim 2 565 {*andsi_1}
     (nil))
(insn 60 59 61 2 (parallel [
            (set (reg:SI 0 ax [113])
                (ior:SI (reg:SI 0 ax [112])
                    (reg:SI 1 dx [110])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":39:16 discrim 2 603 {*iorsi_1}
     (nil))
(insn 61 60 62 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 D.3270+8 S4 A32])
        (reg:SI 0 ax [113])) "test.c":39:16 discrim 2 83 {*movsi_internal}
     (nil))
(insn 62 61 63 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 63 62 64 2 (set (reg:DI 1 dx [115])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 D.3267+0 S8 A64])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 64 63 65 2 (set (mem/c:DI (reg/f:DI 0 ax [114]) [1 <retval>._+0 S8 A32])
        (reg:DI 1 dx [115])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:SI 1 dx [116])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 D.3267+8 S4 A64])) "test.c":36:12 83 {*movsi_internal}
     (nil))
(insn 66 65 67 2 (set (mem/c:SI (plus:DI (reg/f:DI 0 ax [114])
                (const_int 8 [0x8])) [1 <retval>._+8 S4 A32])
        (reg:SI 1 dx [116])) "test.c":36:12 83 {*movsi_internal}
     (nil))
(insn 67 66 68 2 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 68 67 69 2 (set (mem/c:SI (plus:DI (reg/f:DI 0 ax [117])
                (const_int 12 [0xc])) [3 <retval>.__+0 S4 A32])
        (const_int 42424242 [0x28757b2])) "test.c":36:12 83 {*movsi_internal}
     (nil))
(insn 69 68 70 2 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 70 69 71 2 (set (reg:DI 1 dx [119])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [1 D.3270+0 S8 A32])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 71 70 72 2 (set (mem/c:DI (plus:DI (reg/f:DI 0 ax [118])
                (const_int 16 [0x10])) [1 <retval>.___+0 S8 A32])
        (reg:DI 1 dx [119])) "test.c":36:12 82 {*movdi_internal}
     (nil))
(insn 72 71 73 2 (set (reg:SI 1 dx [120])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [1 D.3270+8 S4 A32])) "test.c":36:12 83 {*movsi_internal}
     (nil))
(insn 73 72 79 2 (set (mem/c:SI (plus:DI (reg/f:DI 0 ax [118])
                (const_int 24 [0x18])) [1 <retval>.___+8 S4 A32])
        (reg:SI 1 dx [120])) "test.c":36:12 83 {*movsi_internal}
     (nil))
(insn 79 73 80 2 (set (reg/i:DI 0 ax)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [5 .result_ptr+0 S8 A64])) "test.c":41:1 82 {*movdi_internal}
     (nil))
(insn 80 79 82 2 (use (reg/i:DI 0 ax)) "test.c":41:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 82 80 0 NOTE_INSN_DELETED)

;; Function fact (fact, funcdef_no=3, decl_uid=2854, cgraph_uid=4, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 23
	 Choosing alt 2 in insn 23:  (0) r  (1) 0  (2) BMr {*mulsi3_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 32: point = 0, n_alt = -1
   Insn 31: point = 0, n_alt = -2
   Insn 27: point = 1, n_alt = -2
  BB 3
   Insn 34: point = 4, n_alt = -1
   Insn 9: point = 4, n_alt = 0
  BB 4
   Insn 24: point = 5, n_alt = -2
   Insn 23: point = 7, n_alt = 2
   Insn 22: point = 9, n_alt = 0
   Insn 21: point = 11, n_alt = 3
   Insn 20: point = 12, n_alt = 0
   Insn 19: point = 14, n_alt = 0
   Insn 18: point = 16, n_alt = -2
   Insn 17: point = 17, n_alt = 0
   Insn 16: point = 17, n_alt = -2
   Insn 15: point = 18, n_alt = 0
   Insn 14: point = 20, n_alt = 3
  BB 2
   Insn 7: point = 21, n_alt = -1
   Insn 6: point = 21, n_alt = 1
   Insn 2: point = 21, n_alt = 5
 r82: [17..18]
 r83: [15..16]
 r84: [13..14]
 r85: [8..12]
 r86: [8..9]
 r87: [6..7]
 r88: [2..5]
 r89: [0..1]
 r90: [19..20]
 r91: [10..11]
Compressing live ranges: from 21 to 18 - 85%
Ranges after the compression:
 r82: [14..15]
 r83: [12..13]
 r84: [10..11]
 r85: [6..9]
 r86: [6..7]
 r87: [4..5]
 r88: [2..3]
 r89: [0..1]
 r90: [16..17]
 r91: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 9
changing reg in insn 27
changing reg in insn 27
changing reg in insn 31
changing reg in insn 14
changing reg in insn 15
changing reg in insn 21
deleting insn with uid = 18.
deleting insn with uid = 22.
deleting insn with uid = 24.
deleting insn with uid = 27.
deleting insn with uid = 31.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.


fact

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={3d,1u} r2={2d} r4={2d} r5={3d,2u} r6={1d,9u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={4d,1u} r18={1d} r19={1d,1u,1e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 124{96d,27u,1e} in 14{13 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])
        (reg:DI 5 di [ a ])) "test.c":43:26 82 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])
            (const_int 0 [0]))) "test.c":44:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "test.c":44:8 995 {*jcc}
     (nil)
 -> 12)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 88
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 34 3 (set (reg:SI 0 ax [orig:88 _7 ] [88])
        (const_int 1 [0x1])) "test.c":45:16 83 {*movsi_internal}
     (nil))
(jump_insn 34 9 35 3 (set (pc)
        (label_ref 25)) "test.c":45:16 996 {jump}
     (nil)
 -> 25)
;;  succ:       5 [always]  test.c:45:16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88

(barrier 35 34 12)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 90 91
(code_label 12 35 13 4 8 (nil) [1 uses])
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:DI 0 ax [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])) "test.c":48:16 82 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (parallel [
            (set (reg:DI 0 ax [orig:82 _1 ] [82])
                (plus:DI (reg:DI 0 ax [90])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":48:16 247 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 16 15 17 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:82 _1 ] [82])) "test.c":48:16 82 {*movdi_internal}
     (nil))
(call_insn 17 16 19 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fact") [flags 0x3]  <function_decl 0x7fb06a9dfc00 fact>) [0 fact S1 A8])
            (const_int 0 [0]))) "test.c":48:16 1013 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 17 20 4 (set (reg:DI 0 ax [orig:84 _3 ] [84])
        (sign_extend:DI (reg:SI 0 ax [orig:83 _2 ] [83]))) "test.c":48:16 discrim 1 160 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 4 (set (reg:SI 1 dx [orig:85 _4 ] [85])
        (reg:SI 0 ax [orig:84 _3 ] [84])) "test.c":48:14 discrim 1 83 {*movsi_internal}
     (nil))
(insn 21 20 23 4 (set (reg:DI 0 ax [91])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [6 a+0 S8 A64])) "test.c":48:14 discrim 1 82 {*movdi_internal}
     (nil))
(insn 23 21 25 4 (parallel [
            (set (reg:SI 0 ax [orig:87 _6 ] [87])
                (mult:SI (reg:SI 0 ax [orig:86 _5 ] [86])
                    (reg:SI 1 dx [orig:85 _4 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":48:14 discrim 1 469 {*mulsi3_1}
     (nil))
;;  succ:       5 (FALLTHRU) test.c:48:14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU) test.c:48:14
;;              3 [always]  test.c:45:16
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 88
;; lr  def 	 0 [ax] 89
(code_label 25 23 26 5 9 (nil) [1 uses])
(note 26 25 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 26 36 5 (use (reg/i:SI 0 ax)) "test.c":49:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 36 32 0 NOTE_INSN_DELETED)

;; Function debug__push_hex (debug__push_hex, funcdef_no=4, decl_uid=3232, cgraph_uid=5, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=80, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 19:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 21:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 28:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) qm {*zero_extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) 0  (2) BM {*subdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rBM {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) 0  (2) BM {*subdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 65: point = 0, n_alt = -1
   Insn 64: point = 0, n_alt = -2
   Insn 60: point = 1, n_alt = -2
   Insn 57: point = 3, n_alt = 0
   Insn 56: point = 5, n_alt = 1
   Insn 55: point = 7, n_alt = 3
  BB 6
   Insn 53: point = 8, n_alt = -1
   Insn 52: point = 8, n_alt = 1
   Insn 51: point = 9, n_alt = 0
  BB 4
   Insn 67: point = 10, n_alt = -1
   Insn 24: point = 10, n_alt = 1
  BB 3
   Insn 21: point = 10, n_alt = 8
   Insn 20: point = 11, n_alt = 5
   Insn 19: point = 12, n_alt = 3
   Insn 18: point = 13, n_alt = 3
  BB 2
   Insn 16: point = 14, n_alt = -1
   Insn 15: point = 14, n_alt = 0
   Insn 14: point = 15, n_alt = 3
   Insn 13: point = 16, n_alt = 5
   Insn 12: point = 17, n_alt = 3
   Insn 11: point = 18, n_alt = 0
   Insn 10: point = 19, n_alt = 3
   Insn 6: point = 20, n_alt = 1
   Insn 5: point = 20, n_alt = 5
   Insn 4: point = 20, n_alt = 5
   Insn 3: point = 20, n_alt = 5
   Insn 2: point = 20, n_alt = 5
  BB 5
   Insn 47: point = 20, n_alt = 0
   Insn 46: point = 20, n_alt = 0
   Insn 45: point = 21, n_alt = 0
   Insn 44: point = 23, n_alt = 0
   Insn 43: point = 24, n_alt = 1
   Insn 42: point = 25, n_alt = -2
   Insn 41: point = 26, n_alt = 0
   Insn 40: point = 26, n_alt = 3
   Insn 39: point = 26, n_alt = -2
   Insn 38: point = 27, n_alt = -2
   Insn 37: point = 28, n_alt = 2
   Insn 36: point = 28, n_alt = -2
   Insn 35: point = 29, n_alt = 3
   Insn 34: point = 30, n_alt = -2
   Insn 33: point = 32, n_alt = 1
   Insn 32: point = 34, n_alt = 3
   Insn 31: point = 35, n_alt = 0
   Insn 30: point = 37, n_alt = 4
   Insn 29: point = 39, n_alt = 3
   Insn 28: point = 40, n_alt = 0
 r82: [18..19]
 r83: [10..13]
 r84: [36..37]
 r85: [28..35]
 r86: [31..32]
 r87: [27..30]
 r88: [20..21]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [16..17]
 r93: [14..15]
 r94: [11..12]
 r95: [38..39]
 r96: [33..34]
 r97: [26..29]
 r98: [24..25]
 r99: [22..23]
 r100: [8..9]
 r101: [6..7]
Compressing live ranges: from 40 to 34 - 85%
Ranges after the compression:
 r82: [16..17]
 r83: [10..11]
 r84: [30..31]
 r85: [24..29]
 r86: [26..27]
 r87: [24..25]
 r88: [18..19]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [14..15]
 r93: [12..13]
 r94: [10..11]
 r95: [32..33]
 r96: [28..29]
 r97: [24..25]
 r98: [22..23]
 r99: [20..21]
 r100: [8..9]
 r101: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=80, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 18
changing reg in insn 21
changing reg in insn 19
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 36
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 38
changing reg in insn 45
changing reg in insn 46
changing reg in insn 56
changing reg in insn 57
changing reg in insn 60
changing reg in insn 60
changing reg in insn 64
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 51
changing reg in insn 52
changing reg in insn 55
changing reg in insn 56
deleting insn with uid = 38.
deleting insn with uid = 42.
deleting insn with uid = 57.
deleting insn with uid = 60.
deleting insn with uid = 64.
starting the processing of deferred insns
ending the processing of deferred insns


debug__push_hex

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={17d,18u} r1={5d,4u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,38u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={10d,2u} r18={1d} r19={1d,1u,4e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d,1u} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 197{115d,78u,4e} in 42{41 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  def 	 17 [flags] 82 92 93
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [7 buffer_start+0 S8 A64])
        (reg:DI 5 di [ buffer_start ])) "test.c":53:135 82 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
        (reg:DI 4 si [ buffer_top ])) "test.c":53:135 82 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [7 buffer_end+0 S8 A64])
        (reg:DI 1 dx [ buffer_end ])) "test.c":53:135 82 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
        (reg:DI 2 cx [ bytes ])) "test.c":53:135 82 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [3 bytes_size+0 S4 A32])
        (reg:SI 36 r8 [ bytes_size ])) "test.c":53:135 83 {*movsi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:DI 0 ax [orig:82 _1 ] [82])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [3 bytes_size+0 S4 A32]))) "test.c":54:19 151 {*zero_extendsidi2}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
                    (reg:DI 0 ax [orig:82 _1 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":54:11 247 {*adddi_1}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":55:14 82 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [7 buffer_top_start+0 S8 A64])
        (reg/f:DI 0 ax [92])) "test.c":55:14 82 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":57:8 82 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:CC 17 flags)
        (compare:CC (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [7 buffer_start+0 S8 A64])
            (reg/f:DI 0 ax [93]))) "test.c":57:8 12 {*cmpdi_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "test.c":57:8 995 {*jcc}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 94
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg/f:DI 0 ax [orig:83 buffer_top.0_2 ] [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":58:20 82 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 1 dx [94])
                (plus:DI (reg/f:DI 0 ax [orig:83 buffer_top.0_2 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":58:20 247 {*adddi_1}
     (nil))
(insn 20 19 21 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
        (reg:DI 1 dx [94])) "test.c":58:20 82 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (mem:QI (reg/f:DI 0 ax [orig:83 buffer_top.0_2 ] [83]) [0 *buffer_top.0_2+0 S1 A8])
        (const_int 32 [0x20])) "test.c":58:23 85 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 22 21 23 4 11 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 67 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 bytes_index+0 S4 A32])
        (const_int 0 [0])) "test.c":61:19 83 {*movsi_internal}
     (nil))
(jump_insn 67 24 68 4 (set (pc)
        (label_ref 48)) "test.c":61:5 996 {jump}
     (nil)
 -> 48)
;;  succ:       6 [always]  test.c:61:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 68 67 50)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 86 87 88 95 96 97 98 99
(code_label 50 68 27 5 13 (nil) [1 uses])
(note 27 50 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":62:17 247 {*adddi_1}
     (nil))
(insn 29 28 30 5 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 bytes+0 S8 A64])) "test.c":64:31 82 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:QI 0 ax [orig:84 _3 ] [84])
        (mem:QI (reg/f:DI 0 ax [95]) [0 *bytes_26+0 S1 A8])) "test.c":64:31 85 {*movqi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:SI 1 dx [orig:85 _4 ] [85])
        (zero_extend:SI (reg:QI 0 ax [orig:84 _3 ] [84]))) "test.c":62:33 156 {*zero_extendqisi2}
     (nil))
(insn 32 31 33 5 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [7 buffer_end+0 S8 A64])) "test.c":63:36 82 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg:DI 0 ax [orig:86 _5 ] [86])
                (minus:DI (reg/f:DI 0 ax [96])
                    (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":63:36 325 {*subdi_1}
     (expr_list:REG_EQUAL (minus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -56 [0xffffffffffffffc8])) [7 buffer_end+0 S8 A64])
            (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64]))
        (nil)))
(insn 34 33 35 5 (set (reg:DI 4 si [orig:87 _6 ] [87])
        (reg:DI 0 ax [orig:86 _5 ] [86])) "test.c":62:33 82 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":62:33 82 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 2 cx)
        (reg:SI 1 dx [orig:85 _4 ] [85])) "test.c":62:33 83 {*movsi_internal}
     (nil))
(insn 37 36 39 5 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb06a65c360 *.LC0>)) "test.c":62:33 82 {*movdi_internal}
     (nil))
(insn 39 37 40 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) "test.c":62:33 82 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":62:33 85 {*movqi_internal}
     (nil))
(call_insn 41 40 43 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("snprintf") [flags 0x41]  <function_decl 0x7fb06a931800 snprintf>) [0 __builtin_snprintf S1 A8])
            (const_int 0 [0]))) "test.c":62:33 1013 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 43 41 44 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 bytes_written+0 S4 A32])
        (reg:SI 0 ax [98])) "test.c":62:33 83 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 bytes_written+0 S4 A32])) "test.c":66:20 83 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 0 ax [orig:88 _7 ] [88])
        (sign_extend:DI (reg:SI 0 ax [99]))) "test.c":66:20 160 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 5 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
                    (reg:DI 0 ax [orig:88 _7 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":66:20 247 {*adddi_1}
     (nil))
(insn 47 46 48 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [3 bytes_index+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 bytes_index+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":61:62 discrim 3 246 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [always]  test.c:61:5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 100
(code_label 48 47 49 6 12 (nil) [1 uses])
(note 49 48 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 49 52 6 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 bytes_index+0 S4 A32])) "test.c":61:48 discrim 1 83 {*movsi_internal}
     (nil))
(insn 52 51 53 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [100])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [3 bytes_size+0 S4 A32]))) "test.c":61:48 discrim 1 11 {*cmpsi_1}
     (nil))
(jump_insn 53 52 54 6 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "test.c":61:48 discrim 1 995 {*jcc}
     (nil)
 -> 50)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 89 90 91 101
(note 54 53 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 7 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])) "test.c":69:23 82 {*movdi_internal}
     (nil))
(insn 56 55 65 7 (parallel [
            (set (reg:DI 0 ax [orig:89 _8 ] [89])
                (minus:DI (reg/f:DI 0 ax [101])
                    (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [7 buffer_top_start+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":69:23 325 {*subdi_1}
     (expr_list:REG_EQUAL (minus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -48 [0xffffffffffffffd0])) [7 buffer_top+0 S8 A64])
            (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [7 buffer_top_start+0 S8 A64]))
        (nil)))
(insn 65 56 69 7 (use (reg/i:SI 0 ax)) "test.c":70:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 69 65 0 NOTE_INSN_DELETED)

;; Function debug__push_pointer (debug__push_pointer, funcdef_no=5, decl_uid=3245, cgraph_uid=6, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=80, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 18:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 23:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) qm {*zero_extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) 0  (2) BM {*subdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 48:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) 0  (2) BM {*subdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 68: point = 0, n_alt = -1
   Insn 67: point = 0, n_alt = -2
   Insn 63: point = 1, n_alt = -2
   Insn 60: point = 3, n_alt = 0
   Insn 59: point = 5, n_alt = 1
   Insn 58: point = 7, n_alt = 3
  BB 6
   Insn 56: point = 8, n_alt = -1
   Insn 55: point = 8, n_alt = 0
  BB 4
   Insn 70: point = 8, n_alt = -1
   Insn 26: point = 8, n_alt = 1
   Insn 25: point = 8, n_alt = 0
   Insn 24: point = 8, n_alt = 5
   Insn 23: point = 9, n_alt = 3
   Insn 22: point = 10, n_alt = 5
   Insn 21: point = 11, n_alt = 3
  BB 3
   Insn 18: point = 12, n_alt = 8
   Insn 17: point = 13, n_alt = 5
   Insn 16: point = 14, n_alt = 3
   Insn 15: point = 15, n_alt = 3
  BB 2
   Insn 13: point = 16, n_alt = -1
   Insn 12: point = 16, n_alt = 0
   Insn 11: point = 17, n_alt = 3
   Insn 10: point = 18, n_alt = 5
   Insn 9: point = 19, n_alt = 3
   Insn 5: point = 20, n_alt = 5
   Insn 4: point = 20, n_alt = 5
   Insn 3: point = 20, n_alt = 5
   Insn 2: point = 20, n_alt = 5
  BB 5
   Insn 49: point = 20, n_alt = 0
   Insn 48: point = 20, n_alt = 0
   Insn 47: point = 21, n_alt = 0
   Insn 46: point = 23, n_alt = 0
   Insn 45: point = 24, n_alt = 1
   Insn 44: point = 25, n_alt = -2
   Insn 43: point = 26, n_alt = 0
   Insn 42: point = 26, n_alt = 3
   Insn 41: point = 26, n_alt = -2
   Insn 40: point = 27, n_alt = -2
   Insn 39: point = 28, n_alt = 2
   Insn 38: point = 28, n_alt = -2
   Insn 37: point = 29, n_alt = 3
   Insn 36: point = 30, n_alt = -2
   Insn 35: point = 32, n_alt = 1
   Insn 34: point = 34, n_alt = 3
   Insn 33: point = 35, n_alt = 0
   Insn 32: point = 37, n_alt = 4
   Insn 31: point = 39, n_alt = 3
   Insn 30: point = 40, n_alt = 0
 r82: [12..15]
 r83: [10..11]
 r84: [36..37]
 r85: [28..35]
 r86: [31..32]
 r87: [27..30]
 r88: [20..21]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [18..19]
 r93: [16..17]
 r94: [13..14]
 r95: [8..9]
 r96: [38..39]
 r97: [33..34]
 r98: [26..29]
 r99: [24..25]
 r100: [22..23]
 r101: [6..7]
Compressing live ranges: from 40 to 34 - 85%
Ranges after the compression:
 r82: [12..13]
 r83: [10..11]
 r84: [30..31]
 r85: [24..29]
 r86: [26..27]
 r87: [24..25]
 r88: [18..19]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [16..17]
 r93: [14..15]
 r94: [12..13]
 r95: [8..9]
 r96: [32..33]
 r97: [28..29]
 r98: [24..25]
 r99: [22..23]
 r100: [20..21]
 r101: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=80, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 18
changing reg in insn 16
changing reg in insn 21
changing reg in insn 22
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 38
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 40
changing reg in insn 47
changing reg in insn 48
changing reg in insn 59
changing reg in insn 60
changing reg in insn 63
changing reg in insn 63
changing reg in insn 67
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 23
changing reg in insn 24
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 58
changing reg in insn 59
deleting insn with uid = 40.
deleting insn with uid = 44.
deleting insn with uid = 60.
deleting insn with uid = 63.
deleting insn with uid = 67.
starting the processing of deferred insns
ending the processing of deferred insns


debug__push_pointer

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={17d,18u} r1={5d,4u} r2={3d,2u} r4={3d,2u} r5={3d,2u} r6={1d,39u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={11d,2u} r18={1d} r19={1d,1u,4e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 198{116d,78u,4e} in 43{42 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 92 93
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [7 buffer_start+0 S8 A64])
        (reg:DI 5 di [ buffer_start ])) "test.c":72:120 82 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
        (reg:DI 4 si [ buffer_top ])) "test.c":72:120 82 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [7 buffer_end+0 S8 A64])
        (reg:DI 1 dx [ buffer_end ])) "test.c":72:120 82 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [7 pointer+0 S8 A64])
        (reg:DI 2 cx [ pointer ])) "test.c":72:120 82 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":73:14 82 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [7 buffer_top_start+0 S8 A64])
        (reg/f:DI 0 ax [92])) "test.c":73:14 82 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":75:8 82 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CC 17 flags)
        (compare:CC (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [7 buffer_start+0 S8 A64])
            (reg/f:DI 0 ax [93]))) "test.c":75:8 12 {*cmpdi_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "test.c":75:8 995 {*jcc}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 94
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:DI 0 ax [orig:82 buffer_top.1_1 ] [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":76:20 82 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 1 dx [94])
                (plus:DI (reg/f:DI 0 ax [orig:82 buffer_top.1_1 ] [82])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":76:20 247 {*adddi_1}
     (nil))
(insn 17 16 18 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
        (reg:DI 1 dx [94])) "test.c":76:20 82 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (mem:QI (reg/f:DI 0 ax [orig:82 buffer_top.1_1 ] [82]) [0 *buffer_top.1_1+0 S1 A8])
        (const_int 32 [0x20])) "test.c":76:23 85 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 83 95
(code_label 19 18 20 4 16 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:DI 0 ax [orig:83 pointer.2_2 ] [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [7 pointer+0 S8 A64])) "test.c":79:20 82 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [6 val+0 S8 A64])
        (reg:DI 0 ax [orig:83 pointer.2_2 ] [83])) "test.c":79:14 82 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 0 ax [95])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":80:14 247 {*adddi_1}
     (nil))
(insn 24 23 25 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
        (reg:DI 0 ax [95])) "test.c":80:14 82 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":81:7 247 {*adddi_1}
     (nil))
(insn 26 25 70 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 bytes_index+0 S4 A32])
        (const_int 0 [0])) "test.c":82:19 83 {*movsi_internal}
     (nil))
(jump_insn 70 26 71 4 (set (pc)
        (label_ref 50)) "test.c":82:5 996 {jump}
     (nil)
 -> 50)
;;  succ:       6 [always]  test.c:82:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 71 70 52)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 86 87 88 96 97 98 99 100
(code_label 52 71 29 5 18 (nil) [1 uses])
(note 29 52 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":83:17 247 {*adddi_1}
     (nil))
(insn 31 30 32 5 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 p+0 S8 A64])) "test.c":85:31 82 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:QI 0 ax [orig:84 _3 ] [84])
        (mem:QI (reg/f:DI 0 ax [96]) [0 *p_28+0 S1 A8])) "test.c":85:31 85 {*movqi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:SI 1 dx [orig:85 _4 ] [85])
        (zero_extend:SI (reg:QI 0 ax [orig:84 _3 ] [84]))) "test.c":83:33 156 {*zero_extendqisi2}
     (nil))
(insn 34 33 35 5 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [7 buffer_end+0 S8 A64])) "test.c":84:36 82 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (parallel [
            (set (reg:DI 0 ax [orig:86 _5 ] [86])
                (minus:DI (reg/f:DI 0 ax [97])
                    (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":84:36 325 {*subdi_1}
     (expr_list:REG_EQUAL (minus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -72 [0xffffffffffffffb8])) [7 buffer_end+0 S8 A64])
            (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64]))
        (nil)))
(insn 36 35 37 5 (set (reg:DI 4 si [orig:87 _6 ] [87])
        (reg:DI 0 ax [orig:86 _5 ] [86])) "test.c":83:33 82 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (reg:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":83:33 82 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:SI 2 cx)
        (reg:SI 1 dx [orig:85 _4 ] [85])) "test.c":83:33 83 {*movsi_internal}
     (nil))
(insn 39 38 41 5 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb06a65c360 *.LC0>)) "test.c":83:33 82 {*movdi_internal}
     (nil))
(insn 41 39 42 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) "test.c":83:33 82 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test.c":83:33 85 {*movqi_internal}
     (nil))
(call_insn 43 42 45 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("snprintf") [flags 0x41]  <function_decl 0x7fb06a931800 snprintf>) [0 __builtin_snprintf S1 A8])
            (const_int 0 [0]))) "test.c":83:33 1013 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 45 43 46 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 bytes_written+0 S4 A32])
        (reg:SI 0 ax [99])) "test.c":83:33 83 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 bytes_written+0 S4 A32])) "test.c":87:20 83 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 0 ax [orig:88 _7 ] [88])
        (sign_extend:DI (reg:SI 0 ax [100]))) "test.c":87:20 160 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 5 (parallel [
            (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
                (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
                    (reg:DI 0 ax [orig:88 _7 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":87:20 247 {*adddi_1}
     (nil))
(insn 49 48 50 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [3 bytes_index+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [3 bytes_index+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":82:68 discrim 3 246 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [always]  test.c:82:5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 50 49 51 6 17 (nil) [1 uses])
(note 51 50 55 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 55 51 56 6 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [3 bytes_index+0 S4 A32])
            (const_int 7 [0x7]))) "test.c":82:48 discrim 1 11 {*cmpsi_1}
     (nil))
(jump_insn 56 55 57 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "test.c":82:48 discrim 1 995 {*jcc}
     (nil)
 -> 52)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 89 90 91 101
(note 57 56 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 7 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])) "test.c":90:23 82 {*movdi_internal}
     (nil))
(insn 59 58 68 7 (parallel [
            (set (reg:DI 0 ax [orig:89 _8 ] [89])
                (minus:DI (reg/f:DI 0 ax [101])
                    (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [7 buffer_top_start+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":90:23 325 {*subdi_1}
     (expr_list:REG_EQUAL (minus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -64 [0xffffffffffffffc0])) [7 buffer_top+0 S8 A64])
            (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [7 buffer_top_start+0 S8 A64]))
        (nil)))
(insn 68 59 72 7 (use (reg/i:SI 0 ax)) "test.c":91:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 72 68 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=6, decl_uid=3256, cgraph_uid=7, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=144, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=21,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=15,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=16,overall=15,losers=2 -- refuse
            Staticly defined alt reject+=6
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=19,overall=21,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=21,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=22,overall=16,losers=1 -- refuse
            alt=23: Bad operand -- refuse
            alt=24: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=25,overall=10,losers=1 -- refuse
            alt=26: Bad operand -- refuse
            alt=27: Bad operand -- refuse
	 Choosing alt 4 in insn 5:  (0) r  (1) i {*movdi_internal}
      Creating newreg=91, assigning class GENERAL_REGS to r91
    5: r91:DI=0x1c0b0a0b0a0b0a0b
    Inserting insn reload after:
   38: [frame:DI-0x8]=r91:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) o  (1) re {*movti_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) o  (1) re {*movti_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) o  (1) re {*movti_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) o  (1) re {*movti_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) o  (1) re {*movti_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) o  (1) re {*movti_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) o  (1) re {*movti_internal}
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) o  (1) re {*movti_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 14:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 24:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 35: point = 0, n_alt = -1
   Insn 34: point = 0, n_alt = -2
   Insn 30: point = 1, n_alt = -2
   Insn 27: point = 3, n_alt = 0
   Insn 26: point = 4, n_alt = 0
   Insn 25: point = 4, n_alt = -2
   Insn 24: point = 5, n_alt = 3
   Insn 23: point = 6, n_alt = 0
   Insn 22: point = 6, n_alt = -2
   Insn 21: point = 7, n_alt = -2
   Insn 20: point = 8, n_alt = -2
   Insn 19: point = 9, n_alt = -2
   Insn 18: point = 10, n_alt = 3
   Insn 17: point = 11, n_alt = 3
   Insn 16: point = 12, n_alt = 3
   Insn 15: point = 13, n_alt = 0
   Insn 14: point = 14, n_alt = 3
   Insn 13: point = 15, n_alt = 1
   Insn 12: point = 15, n_alt = 1
   Insn 11: point = 15, n_alt = 1
   Insn 10: point = 15, n_alt = 1
   Insn 9: point = 15, n_alt = 1
   Insn 8: point = 15, n_alt = 1
   Insn 7: point = 15, n_alt = 1
   Insn 6: point = 15, n_alt = 1
   Insn 38: point = 15, n_alt = 5
   Insn 5: point = 16, n_alt = 4
 r82: [8..14]
 r83: [2..3]
 r84: [0..1]
 r85: [9..12]
 r86: [7..11]
 r87: [6..10]
 r88: [4..5]
 r91: [15..16]
Compressing live ranges: from 17 to 10 - 58%
Ranges after the compression:
 r82: [6..7]
 r83: [2..3]
 r84: [0..1]
 r85: [6..7]
 r86: [6..7]
 r87: [6..7]
 r88: [4..5]
 r91: [8..9]

********** Assignment #1: **********

	 Assigning to 91 (cl=GENERAL_REGS, orig=91, freq=2000, tfirst=91, tfreq=2000)...
	   Assign 0 to reload r91 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=144, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 14
changing reg in insn 20
changing reg in insn 15
changing reg in insn 27
changing reg in insn 30
changing reg in insn 30
changing reg in insn 34
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 21
changing reg in insn 18
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
deleting insn with uid = 21.
deleting insn with uid = 22.
deleting insn with uid = 30.
deleting insn with uid = 34.
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,6u} r1={5d,2u} r2={4d,1u} r4={4d,1u} r5={5d,2u} r6={1d,16u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={7d} r18={2d} r19={1d,1u} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 201{168d,33u,0e} in 23{21 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 38 2 (set (reg:DI 0 ax [91])
        (const_int 2020719900335213067 [0x1c0b0a0b0a0b0a0b])) "test.c":94:14 82 {*movdi_internal}
     (nil))
(insn 38 5 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 ip+0 S8 A64])
        (reg:DI 0 ax [91])) "test.c":94:14 82 {*movdi_internal}
     (nil))
(insn 6 38 7 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 buffer+0 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 buffer+16 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 buffer+32 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 buffer+48 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 buffer+64 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 buffer+80 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 buffer+96 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:TI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 buffer+112 S16 A128])
        (const_int 0 [0])) "test.c":96:13 81 {*movti_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":97:5 247 {*adddi_1}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
                (plus:DI (reg/f:DI 0 ax [orig:82 _1 ] [82])
                    (const_int 128 [0x80])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":97:5 247 {*adddi_1}
     (nil))
(insn 16 15 17 2 (set (reg:DI 1 dx [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 ip+0 S8 A64])) "test.c":97:5 82 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:DI 4 si [86])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":97:5 247 {*adddi_1}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg:DI 5 di [87])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":97:5 247 {*adddi_1}
     (nil))
(insn 19 18 20 2 (set (reg:DI 2 cx)
        (reg:DI 1 dx [85])) "test.c":97:5 82 {*movdi_internal}
     (nil))
(insn 20 19 23 2 (set (reg:DI 1 dx)
        (reg/f:DI 0 ax [orig:82 _1 ] [82])) "test.c":97:5 82 {*movdi_internal}
     (nil))
(call_insn 23 20 24 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("debug__push_pointer") [flags 0x3]  <function_decl 0x7fb06a62f100 debug__push_pointer>) [0 debug__push_pointer S1 A8])
            (const_int 0 [0]))) "test.c":97:5 1013 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 24 23 25 2 (parallel [
            (set (reg:DI 0 ax [88])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "test.c":98:5 247 {*adddi_1}
     (nil))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "test.c":98:5 82 {*movdi_internal}
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb06a931100 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "test.c":98:5 1013 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 27 26 35 2 (set (reg:SI 0 ax [orig:83 _7 ] [83])
        (const_int 0 [0])) "test.c":101:12 83 {*movsi_internal}
     (nil))
(insn 35 27 37 2 (use (reg/i:SI 0 ax)) "test.c":102:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 37 35 0 NOTE_INSN_DELETED)
